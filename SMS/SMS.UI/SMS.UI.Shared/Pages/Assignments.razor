@page "/assignments"

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper Class="pa-6" Elevation="3">
        <div class="d-flex justify-space-between align-center mb-6">
            <MudText Typo="Typo.h4" Class="font-weight-bold">Assignments Management</MudText>
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      StartIcon="Icons.Material.Filled.Add"
                      OnClick="ShowCreateForm">
                Add Assignment
            </MudButton>
        </div>
        
        @if (showCreateForm)
        {
            <MudPaper Class="mb-6 pa-4" Elevation="1" Style="background-color: var(--mud-palette-grey-lighten5);">
                <MudText Typo="Typo.h5" Class="mb-4">Add New Assignment</MudText>
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="newAssignment.Title" 
                                     Label="Title" 
                                     Placeholder="Math Homework #1"
                                     Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect T="string" @bind-Value="newAssignment.CourseId" 
                                  Label="Course"
                                  Variant="Variant.Outlined">
                            <MudSelectItem T="string" Value="@("")">Select a course</MudSelectItem>
                            @foreach (var course in availableCourses)
                            {
                                <MudSelectItem T="string" Value="@course.Id.ToString()">@course.Name (@course.Code)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="newAssignment.Description" 
                                     Label="Description" 
                                     Placeholder="Assignment description and instructions..."
                                     Lines="4"
                                     Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudDatePicker @bind-Date="newAssignmentDueDate" 
                                      Label="Due Date" 
                                      Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudNumericField @bind-Value="newAssignment.MaxPoints" 
                                        Label="Max Points" 
                                        Min="1"
                                        Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect T="string" @bind-Value="newAssignment.Status" 
                                  Label="Status"
                                  Variant="Variant.Outlined">
                            <MudSelectItem T="string" Value="@("Draft")">Draft</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Published")">Published</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Closed")">Closed</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect T="string" @bind-Value="newAssignment.Type" 
                                  Label="Type"
                                  Variant="Variant.Outlined">
                            <MudSelectItem T="string" Value="@("Homework")">Homework</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Quiz")">Quiz</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Test")">Test</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Project")">Project</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Essay")">Essay</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Lab")">Lab Work</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
                <div class="mt-4 d-flex gap-2">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Success" 
                              StartIcon="Icons.Material.Filled.Save"
                              OnClick="SaveAssignment">
                        Save
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" 
                              Color="Color.Default"
                              StartIcon="Icons.Material.Filled.Cancel"
                              OnClick="CancelCreate">
                        Cancel
                    </MudButton>
                </div>
            </MudPaper>
        }

        @if (assignments == null)
        {
            <div class="text-center py-12">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                <MudText Class="mt-4">Loading assignments...</MudText>
            </div>
        }
        else if (!assignments.Any())
        {
            <div class="text-center py-12">
                <MudText Typo="Typo.h5" Class="text-gray-600 mb-2">No Assignments Found</MudText>
                <MudText Class="text-gray-500 mb-4">Start by adding your first assignment to the system.</MudText>
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="Icons.Material.Filled.Add"
                          OnClick="ShowCreateForm">
                    Add First Assignment
                </MudButton>
            </div>
        }
        else
        {
            <div class="mb-4 d-flex gap-4 flex-wrap">
                <MudTextField @bind-Value="searchTerm" 
                             @bind-Value:event="oninput"
                             Label="Search assignments..." 
                             Variant="Variant.Outlined"
                             Adornment="Adornment.Start"
                             AdornmentIcon="Icons.Material.Filled.Search"
                             Class="flex-grow-1" />
                <MudSelect T="string" @bind-Value="selectedStatusFilter" 
                          Label="Filter by Status"
                          Variant="Variant.Outlined"
                          Class="min-width-200">
                    <MudSelectItem T="string" Value="@("")">All Statuses</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Draft")">Draft</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Published")">Published</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Closed")">Closed</MudSelectItem>
                </MudSelect>
                <MudSelect T="string" @bind-Value="selectedTypeFilter" 
                          Label="Filter by Type"
                          Variant="Variant.Outlined"
                          Class="min-width-200">
                    <MudSelectItem T="string" Value="@("")">All Types</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Homework")">Homework</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Quiz")">Quiz</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Test")">Test</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Project")">Project</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Essay")">Essay</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Lab")">Lab Work</MudSelectItem>
                </MudSelect>
            </div>

            <!-- Desktop Table View -->
            <div class="d-none d-md-block">
                <MudTable Items="@filteredAssignments" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@(assignments == null)" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>Assignment</MudTh>
                        <MudTh>Course</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>Due Date</MudTh>
                        <MudTh>Points</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Assignment">
                            <div>
                                <MudText Typo="Typo.body1" Class="font-weight-bold">@context.Title</MudText>
                                @if (!string.IsNullOrEmpty(context.Description) && context.Description.Length > 50)
                                {
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">@context.Description.Substring(0, 50)...</MudText>
                                }
                                else if (!string.IsNullOrEmpty(context.Description))
                                {
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">@context.Description</MudText>
                                }
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Course">@context.CourseName</MudTd>
                        <MudTd DataLabel="Type">
                            <MudChip T="string" Color="@GetTypeColor(context.Type)" Size="Size.Small">
                                @context.Type
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Due Date">
                            <MudText Typo="Typo.body2" Color="@GetDueDateColor(context.DueDate)">
                                @context.DueDate.ToString("MMM dd, yyyy")
                            </MudText>
                        </MudTd>
                        <MudTd DataLabel="Points">@context.MaxPoints pts</MudTd>
                        <MudTd DataLabel="Status">
                            <MudChip T="string" Color="@GetStatusColor(context.Status)" Size="Size.Small">
                                @context.Status
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <MudButtonGroup Variant="Variant.Text" Size="Size.Small">
                                <MudIconButton Icon="Icons.Material.Filled.Visibility" 
                                              Color="Color.Info" 
                                              Href="@($"/assignments/{context.Id}")" />
                                <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                              Color="Color.Warning" 
                                              Href="@($"/assignments/edit/{context.Id}")" />
                                <MudIconButton Icon="Icons.Material.Filled.Assignment" 
                                              Color="Color.Success" 
                                              Href="@($"/assignment-submissions/{context.Id}")" />
                                <MudIconButton Icon="Icons.Material.Filled.Delete" 
                                              Color="Color.Error" 
                                              OnClick="@(() => DeleteAssignment(context.Id))" />
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </div>

            <!-- Mobile Card View -->
            <div class="d-block d-md-none">
                <MudGrid>
                    @foreach (var assignment in filteredAssignments)
                    {
                        <MudItem xs="12">
                            <MudCard Elevation="3" Class="mb-3">
                                <MudCardContent>
                                    <div class="d-flex justify-space-between align-start mb-3">
                                        <div class="flex-grow-1">
                                            <MudText Typo="Typo.h6" Class="font-weight-bold">@assignment.Title</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">@assignment.CourseName</MudText>
                                        </div>
                                        <MudChip T="string" Color="@GetStatusColor(assignment.Status)" Size="Size.Small">
                                            @assignment.Status
                                        </MudChip>
                                    </div>
                                    
                                    @if (!string.IsNullOrEmpty(assignment.Description))
                                    {
                                        <MudText Typo="Typo.body2" Class="mb-3">
                                            @(assignment.Description.Length > 100 ? assignment.Description.Substring(0, 100) + "..." : assignment.Description)
                                        </MudText>
                                    }
                                    
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Type</MudText>
                                            <MudChip T="string" Color="@GetTypeColor(assignment.Type)" Size="Size.Small">@assignment.Type</MudChip>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Points</MudText>
                                            <MudText Typo="Typo.body2">@assignment.MaxPoints pts</MudText>
                                        </MudItem>
                                        <MudItem xs="12">
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Due Date</MudText>
                                            <MudText Typo="Typo.body2" Color="@GetDueDateColor(assignment.DueDate)">
                                                @assignment.DueDate.ToString("MMM dd, yyyy")
                                            </MudText>
                                        </MudItem>
                                    </MudGrid>
                                </MudCardContent>
                                
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Info" 
                                              StartIcon="Icons.Material.Filled.Visibility"
                                              Href="@($"/assignments/{assignment.Id}")">
                                        View
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Warning" 
                                              StartIcon="Icons.Material.Filled.Edit"
                                              Href="@($"/assignments/edit/{assignment.Id}")">
                                        Edit
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Success" 
                                              StartIcon="Icons.Material.Filled.Assignment"
                                              Href="@($"/assignment-submissions/{assignment.Id}")">
                                        Submissions
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Error" 
                                              StartIcon="Icons.Material.Filled.Delete"
                                              OnClick="@(() => DeleteAssignment(assignment.Id))">
                                        Delete
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </div>

            <MudText Class="mt-4 text-sm text-gray-600">
                Showing @filteredAssignments.Count() of @(assignments?.Count() ?? 0) assignments
            </MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    private List<AssignmentResponse>? assignments = new();
    private IEnumerable<AssignmentResponse> filteredAssignments => assignments?.Where(FilterAssignments) ?? new List<AssignmentResponse>();
    private string searchTerm = "";
    private string selectedStatusFilter = "";
    private string selectedTypeFilter = "";
    private bool showCreateForm = false;
    private CreateAssignmentRequest newAssignment = new();
    private DateTime? newAssignmentDueDate;

    private List<CourseInfo> availableCourses = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await Task.Delay(500); // Simulate loading
        try
        {
            // Load courses for dropdown
            availableCourses = new List<CourseInfo>
            {
                new CourseInfo { Id = Guid.NewGuid(), Name = "Algebra I", Code = "MATH101" },
                new CourseInfo { Id = Guid.NewGuid(), Name = "Biology Fundamentals", Code = "BIO101" },
                new CourseInfo { Id = Guid.NewGuid(), Name = "English Literature", Code = "ENG201" },
                new CourseInfo { Id = Guid.NewGuid(), Name = "World History", Code = "HIST101" }
            };

            // TODO: Replace with actual API call
            assignments = new List<AssignmentResponse>
            {
                new AssignmentResponse
                {
                    Id = Guid.NewGuid(),
                    Title = "Linear Equations Practice",
                    Description = "Complete exercises 1-20 in Chapter 3. Show all work for full credit.",
                    CourseName = "Algebra I",
                    Type = "Homework",
                    DueDate = DateTime.Now.AddDays(3),
                    MaxPoints = 50,
                    Status = "Published",
                    CreatedDate = DateTime.Now.AddDays(-2)
                },
                new AssignmentResponse
                {
                    Id = Guid.NewGuid(),
                    Title = "Cell Structure Quiz",
                    Description = "Online quiz covering cell organelles and their functions.",
                    CourseName = "Biology Fundamentals",
                    Type = "Quiz",
                    DueDate = DateTime.Now.AddDays(1),
                    MaxPoints = 25,
                    Status = "Published",
                    CreatedDate = DateTime.Now.AddDays(-5)
                },
                new AssignmentResponse
                {
                    Id = Guid.NewGuid(),
                    Title = "Shakespeare Essay",
                    Description = "Write a 5-page analysis of character development in Hamlet.",
                    CourseName = "English Literature",
                    Type = "Essay",
                    DueDate = DateTime.Now.AddDays(10),
                    MaxPoints = 100,
                    Status = "Published",
                    CreatedDate = DateTime.Now.AddDays(-7)
                },
                new AssignmentResponse
                {
                    Id = Guid.NewGuid(),
                    Title = "Final Exam",
                    Description = "Comprehensive exam covering all course material.",
                    CourseName = "World History",
                    Type = "Test",
                    DueDate = DateTime.Now.AddDays(-2),
                    MaxPoints = 200,
                    Status = "Closed",
                    CreatedDate = DateTime.Now.AddDays(-30)
                }
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private bool FilterAssignments(AssignmentResponse assignment)
    {
        var matchesSearch = string.IsNullOrWhiteSpace(searchTerm) ||
                           (assignment.Title?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                           (assignment.CourseName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                           (assignment.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false);

        var matchesStatus = string.IsNullOrWhiteSpace(selectedStatusFilter) ||
                           (assignment.Status?.Equals(selectedStatusFilter, StringComparison.OrdinalIgnoreCase) ?? false);

        var matchesType = string.IsNullOrWhiteSpace(selectedTypeFilter) ||
                         (assignment.Type?.Equals(selectedTypeFilter, StringComparison.OrdinalIgnoreCase) ?? false);

        return matchesSearch && matchesStatus && matchesType;
    }

    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "published" => "badge-success",
            "draft" => "badge-warning",
            "closed" => "badge-secondary",
            _ => "badge-secondary"
        };
    }

    private string GetTypeBadgeClass(string type)
    {
        return type?.ToLower() switch
        {
            "homework" => "badge-primary",
            "quiz" => "badge-info",
            "test" => "badge-danger",
            "project" => "badge-success",
            "essay" => "badge-warning",
            "lab" => "badge-secondary",
            _ => "badge-secondary"
        };
    }

    private string GetDueDateClass(DateTime dueDate)
    {
        var daysUntilDue = (dueDate - DateTime.Now).Days;
        
        if (daysUntilDue < 0)
            return "text-red-600 font-semibold"; // Overdue
        else if (daysUntilDue == 0)
            return "text-orange-600 font-semibold"; // Due today
        else if (daysUntilDue == 1)
            return "text-yellow-600 font-semibold"; // Due tomorrow
        else
            return "text-gray-700"; // Future
    }

    private void ShowCreateForm()
    {
        newAssignment = new CreateAssignmentRequest
        {
            MaxPoints = 100,
            Status = "Draft",
            Type = "Homework"
        };
        newAssignmentDueDate = DateTime.Now.AddDays(7);
        showCreateForm = true;
    }

    private void CancelCreate()
    {
        showCreateForm = false;
        newAssignment = new CreateAssignmentRequest();
        newAssignmentDueDate = null;
    }

    private void SaveAssignment()
    {
        if (assignments != null && !string.IsNullOrWhiteSpace(newAssignment.Title) && !string.IsNullOrWhiteSpace(newAssignment.CourseId) && newAssignmentDueDate.HasValue)
        {
            var selectedCourse = availableCourses.FirstOrDefault(c => c.Id.ToString() == newAssignment.CourseId);

            var assignment = new AssignmentResponse
            {
                Id = Guid.NewGuid(),
                Title = newAssignment.Title,
                Description = newAssignment.Description,
                CourseName = selectedCourse?.Name ?? "Unknown Course",
                Type = newAssignment.Type,
                DueDate = newAssignmentDueDate.Value,
                MaxPoints = newAssignment.MaxPoints,
                Status = newAssignment.Status,
                CreatedDate = DateTime.Now
            };

            assignments.Add(assignment);
            CancelCreate();
            StateHasChanged();
        }
    }

    private void DeleteAssignment(Guid assignmentId)
    {
        if (assignments != null)
        {
            assignments.RemoveAll(a => a.Id == assignmentId);
            StateHasChanged();
        }
    }

    private Color GetStatusColor(string status)
    {
        return status switch
        {
            "Published" => Color.Success,
            "Draft" => Color.Warning,
            "Closed" => Color.Error,
            _ => Color.Default
        };
    }

    private Color GetTypeColor(string type)
    {
        return type switch
        {
            "Test" => Color.Error,
            "Quiz" => Color.Warning,
            "Project" => Color.Info,
            "Homework" => Color.Primary,
            "Essay" => Color.Secondary,
            "Lab" => Color.Success,
            _ => Color.Default
        };
    }

    private Color GetDueDateColor(DateTime dueDate)
    {
        var daysUntilDue = (dueDate.Date - DateTime.Now.Date).Days;
        if (daysUntilDue < 0) return Color.Error;
        if (daysUntilDue <= 1) return Color.Warning;
        if (daysUntilDue <= 3) return Color.Info;
        return Color.Default;
    }

    // Simplified models
    public class CreateAssignmentRequest
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string CourseId { get; set; } = "";
        public string Type { get; set; } = "Homework";
        public DateTime DueDate { get; set; } = DateTime.Now.AddDays(7);
        public int MaxPoints { get; set; } = 100;
        public string Status { get; set; } = "Draft";
    }

    public class AssignmentResponse
    {
        public Guid Id { get; set; }
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string CourseName { get; set; } = "";
        public string Type { get; set; } = "";
        public DateTime DueDate { get; set; }
        public int MaxPoints { get; set; }
        public string Status { get; set; } = "";
        public DateTime CreatedDate { get; set; }
    }

    public class CourseInfo
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string Code { get; set; } = "";
    }
}
