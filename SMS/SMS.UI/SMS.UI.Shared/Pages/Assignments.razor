@page "/assignments"

<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <div class="flex justify-between items-center">
                <h2 class="text-2xl font-bold text-gray-800">Assignments Management</h2>
                <button @onclick="ShowCreateForm" class="btn btn-primary">
                    ‚ûï Add Assignment
                </button>
            </div>
        </div>
        
        <div class="card-body">
            @if (showCreateForm)
            {
                <div class="mb-6 p-4 bg-gray-50 rounded-lg">
                    <h3 class="text-lg font-semibold mb-4">Add New Assignment</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Title</label>
                            <input type="text" @bind="newAssignment.Title" class="form-control" placeholder="Math Homework #1" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Course</label>
                            <select @bind="newAssignment.CourseId" class="form-control">
                                <option value="">Select a course</option>
                                @foreach (var course in availableCourses)
                                {
                                    <option value="@course.Id">@course.Name (@course.Code)</option>
                                }
                            </select>
                        </div>
                        <div class="col-span-2">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                            <textarea @bind="newAssignment.Description" class="form-control" rows="4" placeholder="Assignment description and instructions..."></textarea>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Due Date</label>
                            <input type="date" @bind="newAssignment.DueDate" class="form-control" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Max Points</label>
                            <input type="number" @bind="newAssignment.MaxPoints" class="form-control" placeholder="100" min="1" step="1" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                            <select @bind="newAssignment.Status" class="form-control">
                                <option value="Draft">Draft</option>
                                <option value="Published">Published</option>
                                <option value="Closed">Closed</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Type</label>
                            <select @bind="newAssignment.Type" class="form-control">
                                <option value="Homework">Homework</option>
                                <option value="Quiz">Quiz</option>
                                <option value="Test">Test</option>
                                <option value="Project">Project</option>
                                <option value="Essay">Essay</option>
                                <option value="Lab">Lab Work</option>
                            </select>
                        </div>
                    </div>
                    <div class="mt-4 flex gap-2">
                        <button @onclick="SaveAssignment" class="btn btn-success">üíæ Save</button>
                        <button @onclick="CancelCreate" class="btn btn-secondary">‚ùå Cancel</button>
                    </div>
                </div>
            }

            @if (assignments == null)
            {
                <div class="text-center py-12">
                    <div class="spinner"></div>
                    <p class="mt-4">Loading assignments...</p>
                </div>
            }
            else if (!assignments.Any())
            {
                <div class="text-center py-12">
                    <h3 class="text-lg font-semibold text-gray-600 mb-2">No Assignments Found</h3>
                    <p class="text-gray-500 mb-4">Start by adding your first assignment to the system.</p>
                    <button @onclick="ShowCreateForm" class="btn btn-primary">
                        ‚ûï Add First Assignment
                    </button>
                </div>
            }
            else
            {
                <div class="mb-4 flex gap-4">
                    <input type="text" @bind="searchTerm" @bind:event="oninput" 
                           placeholder="Search assignments..." 
                           class="form-control max-w-md" />
                    <select @bind="selectedStatusFilter" class="form-control max-w-xs">
                        <option value="">All Statuses</option>
                        <option value="Draft">Draft</option>
                        <option value="Published">Published</option>
                        <option value="Closed">Closed</option>
                    </select>
                    <select @bind="selectedTypeFilter" class="form-control max-w-xs">
                        <option value="">All Types</option>
                        <option value="Homework">Homework</option>
                        <option value="Quiz">Quiz</option>
                        <option value="Test">Test</option>
                        <option value="Project">Project</option>
                        <option value="Essay">Essay</option>
                        <option value="Lab">Lab Work</option>
                    </select>
                </div>

                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Course</th>
                                <th>Type</th>
                                <th>Due Date</th>
                                <th>Max Points</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var assignment in filteredAssignments)
                            {
                                <tr>
                                    <td>
                                        <div class="font-medium">@assignment.Title</div>
                                        @if (!string.IsNullOrEmpty(assignment.Description) && assignment.Description.Length > 50)
                                        {
                                            <div class="text-sm text-gray-600">@assignment.Description.Substring(0, 50)...</div>
                                        }
                                        else if (!string.IsNullOrEmpty(assignment.Description))
                                        {
                                            <div class="text-sm text-gray-600">@assignment.Description</div>
                                        }
                                    </td>
                                    <td>@assignment.CourseName</td>
                                    <td>
                                        <span class="badge @GetTypeBadgeClass(assignment.Type)">
                                            @assignment.Type
                                        </span>
                                    </td>
                                    <td>
                                        <div class="@GetDueDateClass(assignment.DueDate)">
                                            @assignment.DueDate.ToString("MMM dd, yyyy")
                                        </div>
                                    </td>
                                    <td>@assignment.MaxPoints pts</td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(assignment.Status)">
                                            @assignment.Status
                                        </span>
                                    </td>
                                    <td>@assignment.CreatedDate.ToString("MMM dd")</td>
                                    <td>
                                        <div class="btn-group">
                                            <a href="/assignments/@assignment.Id" class="btn btn-sm btn-info" title="View">üëÅÔ∏è</a>
                                            <a href="/assignments/edit/@assignment.Id" class="btn btn-sm btn-warning" title="Edit">‚úèÔ∏è</a>
                                            <a href="/assignment-submissions/@assignment.Id" class="btn btn-sm btn-success" title="Submissions">üìù</a>
                                            <button @onclick="(() => DeleteAssignment(assignment.Id))" class="btn btn-sm btn-danger" title="Delete">üóëÔ∏è</button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="mt-4 text-sm text-gray-600">
                    Showing @filteredAssignments.Count() of @assignments.Count() assignments
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<AssignmentResponse>? assignments = new();
    private IEnumerable<AssignmentResponse> filteredAssignments => assignments?.Where(FilterAssignments) ?? new List<AssignmentResponse>();
    private string searchTerm = "";
    private string selectedStatusFilter = "";
    private string selectedTypeFilter = "";
    private bool showCreateForm = false;
    private CreateAssignmentRequest newAssignment = new();

    private List<CourseInfo> availableCourses = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await Task.Delay(500); // Simulate loading
        try
        {
            // Load courses for dropdown
            availableCourses = new List<CourseInfo>
            {
                new CourseInfo { Id = Guid.NewGuid(), Name = "Algebra I", Code = "MATH101" },
                new CourseInfo { Id = Guid.NewGuid(), Name = "Biology Fundamentals", Code = "BIO101" },
                new CourseInfo { Id = Guid.NewGuid(), Name = "English Literature", Code = "ENG201" },
                new CourseInfo { Id = Guid.NewGuid(), Name = "World History", Code = "HIST101" }
            };

            // TODO: Replace with actual API call
            assignments = new List<AssignmentResponse>
            {
                new AssignmentResponse
                {
                    Id = Guid.NewGuid(),
                    Title = "Linear Equations Practice",
                    Description = "Complete exercises 1-20 in Chapter 3. Show all work for full credit.",
                    CourseName = "Algebra I",
                    Type = "Homework",
                    DueDate = DateTime.Now.AddDays(3),
                    MaxPoints = 50,
                    Status = "Published",
                    CreatedDate = DateTime.Now.AddDays(-2)
                },
                new AssignmentResponse
                {
                    Id = Guid.NewGuid(),
                    Title = "Cell Structure Quiz",
                    Description = "Online quiz covering cell organelles and their functions.",
                    CourseName = "Biology Fundamentals",
                    Type = "Quiz",
                    DueDate = DateTime.Now.AddDays(1),
                    MaxPoints = 25,
                    Status = "Published",
                    CreatedDate = DateTime.Now.AddDays(-5)
                },
                new AssignmentResponse
                {
                    Id = Guid.NewGuid(),
                    Title = "Shakespeare Essay",
                    Description = "Write a 5-page analysis of character development in Hamlet.",
                    CourseName = "English Literature",
                    Type = "Essay",
                    DueDate = DateTime.Now.AddDays(10),
                    MaxPoints = 100,
                    Status = "Published",
                    CreatedDate = DateTime.Now.AddDays(-7)
                },
                new AssignmentResponse
                {
                    Id = Guid.NewGuid(),
                    Title = "Final Exam",
                    Description = "Comprehensive exam covering all course material.",
                    CourseName = "World History",
                    Type = "Test",
                    DueDate = DateTime.Now.AddDays(-2),
                    MaxPoints = 200,
                    Status = "Closed",
                    CreatedDate = DateTime.Now.AddDays(-30)
                }
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private bool FilterAssignments(AssignmentResponse assignment)
    {
        var matchesSearch = string.IsNullOrWhiteSpace(searchTerm) ||
                           (assignment.Title?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                           (assignment.CourseName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                           (assignment.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false);

        var matchesStatus = string.IsNullOrWhiteSpace(selectedStatusFilter) ||
                           (assignment.Status?.Equals(selectedStatusFilter, StringComparison.OrdinalIgnoreCase) ?? false);

        var matchesType = string.IsNullOrWhiteSpace(selectedTypeFilter) ||
                         (assignment.Type?.Equals(selectedTypeFilter, StringComparison.OrdinalIgnoreCase) ?? false);

        return matchesSearch && matchesStatus && matchesType;
    }

    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "published" => "badge-success",
            "draft" => "badge-warning",
            "closed" => "badge-secondary",
            _ => "badge-secondary"
        };
    }

    private string GetTypeBadgeClass(string type)
    {
        return type?.ToLower() switch
        {
            "homework" => "badge-primary",
            "quiz" => "badge-info",
            "test" => "badge-danger",
            "project" => "badge-success",
            "essay" => "badge-warning",
            "lab" => "badge-secondary",
            _ => "badge-secondary"
        };
    }

    private string GetDueDateClass(DateTime dueDate)
    {
        var daysUntilDue = (dueDate - DateTime.Now).Days;
        
        if (daysUntilDue < 0)
            return "text-red-600 font-semibold"; // Overdue
        else if (daysUntilDue == 0)
            return "text-orange-600 font-semibold"; // Due today
        else if (daysUntilDue == 1)
            return "text-yellow-600 font-semibold"; // Due tomorrow
        else
            return "text-gray-700"; // Future
    }

    private void ShowCreateForm()
    {
        newAssignment = new CreateAssignmentRequest
        {
            DueDate = DateTime.Now.AddDays(7),
            MaxPoints = 100,
            Status = "Draft",
            Type = "Homework"
        };
        showCreateForm = true;
    }

    private void CancelCreate()
    {
        showCreateForm = false;
        newAssignment = new CreateAssignmentRequest();
    }

    private void SaveAssignment()
    {
        if (assignments != null && !string.IsNullOrWhiteSpace(newAssignment.Title) && !string.IsNullOrWhiteSpace(newAssignment.CourseId))
        {
            var selectedCourse = availableCourses.FirstOrDefault(c => c.Id.ToString() == newAssignment.CourseId);

            var assignment = new AssignmentResponse
            {
                Id = Guid.NewGuid(),
                Title = newAssignment.Title,
                Description = newAssignment.Description,
                CourseName = selectedCourse?.Name ?? "Unknown Course",
                Type = newAssignment.Type,
                DueDate = newAssignment.DueDate,
                MaxPoints = newAssignment.MaxPoints,
                Status = newAssignment.Status,
                CreatedDate = DateTime.Now
            };

            assignments.Add(assignment);
            CancelCreate();
            StateHasChanged();
        }
    }

    private void DeleteAssignment(Guid assignmentId)
    {
        if (assignments != null)
        {
            assignments.RemoveAll(a => a.Id == assignmentId);
            StateHasChanged();
        }
    }

    // Simplified models
    public class CreateAssignmentRequest
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string CourseId { get; set; } = "";
        public string Type { get; set; } = "Homework";
        public DateTime DueDate { get; set; } = DateTime.Now.AddDays(7);
        public int MaxPoints { get; set; } = 100;
        public string Status { get; set; } = "Draft";
    }

    public class AssignmentResponse
    {
        public Guid Id { get; set; }
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string CourseName { get; set; } = "";
        public string Type { get; set; } = "";
        public DateTime DueDate { get; set; }
        public int MaxPoints { get; set; }
        public string Status { get; set; } = "";
        public DateTime CreatedDate { get; set; }
    }

    public class CourseInfo
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string Code { get; set; } = "";
    }
}
