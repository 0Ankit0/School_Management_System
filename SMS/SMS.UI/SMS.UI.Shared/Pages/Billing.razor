@page "/billing"

<MudContainer Class="mt-4">
    <MudPaper Elevation="3" Class="pa-6">
        <div class="d-flex justify-space-between align-center mb-6">
            <MudText Typo="Typo.h3" Color="Color.Primary">Billing Management</MudText>
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      StartIcon="Icons.Material.Filled.Add"
                      OnClick="ShowCreateForm">
                Create Invoice
            </MudButton>
        </div>
        
        @if (showCreateForm)
        {
            <MudPaper Elevation="2" Class="pa-4 mb-6" Style="background-color: var(--mud-palette-grey-lighten5);">
                <MudText Typo="Typo.h5" Class="mb-4">Create New Invoice</MudText>
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudSelect T="Guid?" @bind-Value="newInvoice.StudentId" 
                                  Label="Student"
                                  Variant="Variant.Outlined">
                            <MudSelectItem T="Guid?" Value="null">Select a student</MudSelectItem>
                            @foreach (var student in availableStudents)
                            {
                                <MudSelectItem T="Guid?" Value="student.Id">@student.Name (@student.StudentId)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect T="string" @bind-Value="newInvoice.Type" 
                                  Label="Type"
                                  Variant="Variant.Outlined">
                            <MudSelectItem T="string" Value="@("Tuition")">Tuition Fee</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Library")">Library Fee</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Laboratory")">Laboratory Fee</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Sports")">Sports Fee</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Transportation")">Transportation Fee</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Examination")">Examination Fee</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Miscellaneous")">Miscellaneous</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect T="string" @bind-Value="newInvoice.AcademicYear" 
                                  Label="Academic Year"
                                  Variant="Variant.Outlined">
                            <MudSelectItem T="string" Value="@("")">Select academic year</MudSelectItem>
                            @foreach (var year in availableAcademicYears)
                            {
                                <MudSelectItem T="string" Value="@year">@year</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect T="string" @bind-Value="newInvoice.Term" 
                                  Label="Term"
                                  Variant="Variant.Outlined">
                            <MudSelectItem T="string" Value="@("Fall")">Fall Term</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Spring")">Spring Term</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Summer")">Summer Term</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Annual")">Annual</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudNumericField T="decimal" @bind-Value="newInvoice.Amount" 
                                        Label="Amount ($)" 
                                        Variant="Variant.Outlined"
                                        Min="0"
                                        Step="0.01m"
                                        Format="N2" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudDatePicker @bind-Date="newInvoice.DueDate" 
                                      Label="Due Date"
                                      Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="newInvoice.Description" 
                                     Label="Description"
                                     Variant="Variant.Outlined"
                                     Lines="3"
                                     Placeholder="Invoice description..." />
                    </MudItem>
                </MudGrid>
                <div class="d-flex gap-2 mt-4">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Success" 
                              StartIcon="Icons.Material.Filled.Save"
                              OnClick="SaveInvoice">
                        Create Invoice
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" 
                              StartIcon="Icons.Material.Filled.Cancel"
                              OnClick="CancelCreate">
                        Cancel
                    </MudButton>
                </div>
            </MudPaper>
        }

        @if (invoices == null)
        {
            <div class="text-center py-12">
                <MudProgressCircular Indeterminate="true" />
                <MudText Class="mt-4">Loading invoices...</MudText>
            </div>
        }
        else if (!invoices.Any())
        {
            <div class="text-center py-12">
                <MudText Typo="Typo.h5" Class="text-gray-600 mb-2">No Invoices Found</MudText>
                <MudText Class="text-gray-500 mb-4">Start by creating your first invoice.</MudText>
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="Icons.Material.Filled.Add"
                          OnClick="ShowCreateForm">
                    Create First Invoice
                </MudButton>
            </div>
        }
        else
        {
            <div class="mb-4">
                <MudGrid>
                    <MudItem xs="12" sm="6" md="3">
                        <MudPaper Class="pa-4" Style="background-color: var(--mud-palette-info-lighten5);">
                            <MudText Typo="Typo.subtitle1" Style="color: var(--mud-palette-info-darken2);">Total Outstanding</MudText>
                            <MudText Typo="Typo.h4" Style="color: var(--mud-palette-info-darken1);">${GetTotalOutstanding():F2}</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudPaper Class="pa-4" Style="background-color: var(--mud-palette-success-lighten5);">
                            <MudText Typo="Typo.subtitle1" Style="color: var(--mud-palette-success-darken2);">Total Paid</MudText>
                            <MudText Typo="Typo.h4" Style="color: var(--mud-palette-success-darken1);">${GetTotalPaid():F2}</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudPaper Class="pa-4" Style="background-color: var(--mud-palette-warning-lighten5);">
                            <MudText Typo="Typo.subtitle1" Style="color: var(--mud-palette-warning-darken2);">Overdue</MudText>
                            <MudText Typo="Typo.h4" Style="color: var(--mud-palette-warning-darken1);">${GetTotalOverdue():F2}</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudPaper Class="pa-4" Style="background-color: var(--mud-palette-grey-lighten4);">
                            <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Total Invoices</MudText>
                            <MudText Typo="Typo.h4">@invoices.Count()</MudText>
                        </MudPaper>
                    </MudItem>
                </MudGrid>

                <div class="d-flex gap-4 flex-wrap mb-4 mt-4">
                    <MudTextField @bind-Value="searchTerm" 
                                 @bind-Value:event="oninput"
                                 Label="Search invoices..." 
                                 Variant="Variant.Outlined"
                                 Adornment="Adornment.Start"
                                 AdornmentIcon="Icons.Material.Filled.Search"
                                 Class="flex-grow-1" />
                    <MudSelect T="string" @bind-Value="selectedStatusFilter" 
                              Label="Filter by Status"
                              Variant="Variant.Outlined"
                              Class="min-width-200">
                        <MudSelectItem T="string" Value="@("")">All Statuses</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Pending")">Pending</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Paid")">Paid</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Overdue")">Overdue</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Cancelled")">Cancelled</MudSelectItem>
                    </MudSelect>
                    <MudSelect T="string" @bind-Value="selectedTypeFilter" 
                              Label="Filter by Type"
                              Variant="Variant.Outlined"
                              Class="min-width-200">
                        <MudSelectItem T="string" Value="@("")">All Types</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Tuition")">Tuition</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Library")">Library</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Laboratory")">Laboratory</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Sports")">Sports</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Transportation")">Transportation</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Examination")">Examination</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Miscellaneous")">Miscellaneous</MudSelectItem>
                    </MudSelect>
                </div>
            </div>

            <!-- Desktop Table View -->
            <div class="d-none d-md-block">
                <MudTable Items="@filteredInvoices" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@(invoices == null)" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>Invoice #</MudTh>
                        <MudTh>Student</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>Amount</MudTh>
                        <MudTh>Due Date</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Created</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Invoice #">
                            <div>
                                <MudText Typo="Typo.body1" Class="font-weight-medium">#@context.InvoiceNumber</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@context.AcademicYear - @context.Term</MudText>
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Student">@context.StudentName</MudTd>
                        <MudTd DataLabel="Type">
                            <MudChip T="string" Color="@GetTypeColor(context.Type)" Size="Size.Small">
                                @context.Type
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Amount">
                            <MudText Typo="Typo.body1" Class="font-weight-medium">${context.Amount:F2}</MudText>
                        </MudTd>
                        <MudTd DataLabel="Due Date">
                            <MudText Color="@GetDueDateColor(context.DueDate, context.Status)">
                                @context.DueDate.ToString("MMM dd, yyyy")
                            </MudText>
                        </MudTd>
                        <MudTd DataLabel="Status">
                            <MudChip T="string" Color="@GetStatusColor(context.Status)" Size="Size.Small">
                                @context.Status
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Created">@context.CreatedDate.ToString("MMM dd")</MudTd>
                        <MudTd DataLabel="Actions">
                            <MudButtonGroup Variant="Variant.Text" Size="Size.Small">
                                <MudIconButton Icon="Icons.Material.Filled.Visibility" 
                                              Color="Color.Info" 
                                              Href="@($"/invoices/{context.Id}")" />
                                @if (context.Status == "Pending" || context.Status == "Overdue")
                                {
                                    <MudIconButton Icon="Icons.Material.Filled.Payment" 
                                                  Color="Color.Success" 
                                                  OnClick="@(() => MarkAsPaid(context.Id))" />
                                }
                                <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                              Color="Color.Warning" 
                                              Href="@($"/invoices/edit/{context.Id}")" />
                                <MudIconButton Icon="Icons.Material.Filled.Delete" 
                                              Color="Color.Error" 
                                              OnClick="@(() => DeleteInvoice(context.Id))" />
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </div>

            <!-- Mobile Card View -->
            <div class="d-block d-md-none">
                <MudGrid>
                    @foreach (var invoice in filteredInvoices)
                    {
                        <MudItem xs="12">
                            <MudCard Elevation="3" Class="mb-3">
                                <MudCardContent>
                                    <div class="d-flex justify-space-between align-start mb-3">
                                        <div class="flex-grow-1">
                                            <MudText Typo="Typo.h6" Class="font-weight-bold">#@invoice.InvoiceNumber</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">@invoice.StudentName</MudText>
                                        </div>
                                        <MudChip T="string" Color="@GetStatusColor(invoice.Status)" Size="Size.Small">
                                            @invoice.Status
                                        </MudChip>
                                    </div>
                                    
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Type</MudText>
                                            <MudChip T="string" Color="@GetTypeColor(invoice.Type)" Size="Size.Small">
                                                @invoice.Type
                                            </MudChip>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Amount</MudText>
                                            <MudText Typo="Typo.h6" Class="font-weight-bold">${invoice.Amount:F2}</MudText>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Due Date</MudText>
                                            <MudText Typo="Typo.body2" Color="@GetDueDateColor(invoice.DueDate, invoice.Status)">
                                                @invoice.DueDate.ToString("MMM dd, yyyy")
                                            </MudText>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Academic Year</MudText>
                                            <MudText Typo="Typo.body2">@invoice.AcademicYear - @invoice.Term</MudText>
                                        </MudItem>
                                    </MudGrid>
                                </MudCardContent>
                                
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Info" 
                                              StartIcon="Icons.Material.Filled.Visibility"
                                              Href="@($"/invoices/{invoice.Id}")">
                                        View
                                    </MudButton>
                                    @if (invoice.Status == "Pending" || invoice.Status == "Overdue")
                                    {
                                        <MudButton Variant="Variant.Text" 
                                                  Color="Color.Success" 
                                                  StartIcon="Icons.Material.Filled.Payment"
                                                  OnClick="@(() => MarkAsPaid(invoice.Id))">
                                            Pay
                                        </MudButton>
                                    }
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Warning" 
                                              StartIcon="Icons.Material.Filled.Edit"
                                              Href="@($"/invoices/edit/{invoice.Id}")">
                                        Edit
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Error" 
                                              StartIcon="Icons.Material.Filled.Delete"
                                              OnClick="@(() => DeleteInvoice(invoice.Id))">
                                        Delete
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </div>

            <MudText Class="mt-4 text-sm text-gray-600">
                Showing @(filteredInvoices?.Count() ?? 0) of @(invoices?.Count() ?? 0) invoices
            </MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    private List<InvoiceResponse>? invoices = new();
    private IEnumerable<InvoiceResponse> filteredInvoices => invoices?.Where(FilterInvoices) ?? new List<InvoiceResponse>();
    private string searchTerm = "";
    private string selectedStatusFilter = "";
    private string selectedTypeFilter = "";
    private bool showCreateForm = false;
    private CreateInvoiceRequest newInvoice = new();

    private List<StudentInfo> availableStudents = new();
    private List<string> availableAcademicYears = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await Task.Delay(500); // Simulate loading
        try
        {
            // Load students for dropdown
            availableStudents = new List<StudentInfo>
            {
                new StudentInfo { Id = Guid.NewGuid(), Name = "John Doe", StudentId = "STU001" },
                new StudentInfo { Id = Guid.NewGuid(), Name = "Jane Smith", StudentId = "STU002" },
                new StudentInfo { Id = Guid.NewGuid(), Name = "Mike Johnson", StudentId = "STU003" },
                new StudentInfo { Id = Guid.NewGuid(), Name = "Sarah Wilson", StudentId = "STU004" }
            };

            // Load academic years
            availableAcademicYears = new List<string>
            {
                "2024-2025",
                "2023-2024",
                "2022-2023"
            };

            // TODO: Replace with actual API call
            invoices = new List<InvoiceResponse>
            {
                new InvoiceResponse
                {
                    Id = Guid.NewGuid(),
                    InvoiceNumber = "INV-2024-001",
                    StudentName = "John Doe",
                    Type = "Tuition",
                    Amount = 2500.00m,
                    DueDate = DateTime.Now.AddDays(15),
                    Status = "Pending",
                    AcademicYear = "2024-2025",
                    Term = "Fall",
                    Description = "Fall semester tuition fee",
                    CreatedDate = DateTime.Now.AddDays(-5)
                },
                new InvoiceResponse
                {
                    Id = Guid.NewGuid(),
                    InvoiceNumber = "INV-2024-002",
                    StudentName = "Jane Smith",
                    Type = "Library",
                    Amount = 150.00m,
                    DueDate = DateTime.Now.AddDays(-2),
                    Status = "Overdue",
                    AcademicYear = "2024-2025",
                    Term = "Fall",
                    Description = "Library membership and book fees",
                    CreatedDate = DateTime.Now.AddDays(-20)
                },
                new InvoiceResponse
                {
                    Id = Guid.NewGuid(),
                    InvoiceNumber = "INV-2024-003",
                    StudentName = "Mike Johnson",
                    Type = "Laboratory",
                    Amount = 300.00m,
                    DueDate = DateTime.Now.AddDays(-10),
                    Status = "Paid",
                    AcademicYear = "2024-2025",
                    Term = "Fall",
                    Description = "Chemistry lab equipment and materials",
                    CreatedDate = DateTime.Now.AddDays(-30)
                }
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private decimal GetTotalOutstanding()
    {
        return invoices?.Where(i => i.Status == "Pending").Sum(i => i.Amount) ?? 0;
    }

    private decimal GetTotalPaid()
    {
        return invoices?.Where(i => i.Status == "Paid").Sum(i => i.Amount) ?? 0;
    }

    private decimal GetTotalOverdue()
    {
        return invoices?.Where(i => i.Status == "Overdue").Sum(i => i.Amount) ?? 0;
    }

    private bool FilterInvoices(InvoiceResponse invoice)
    {
        var matchesSearch = string.IsNullOrWhiteSpace(searchTerm) ||
                           (invoice.StudentName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                           (invoice.InvoiceNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                           (invoice.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false);

        var matchesStatus = string.IsNullOrWhiteSpace(selectedStatusFilter) ||
                           (invoice.Status?.Equals(selectedStatusFilter, StringComparison.OrdinalIgnoreCase) ?? false);

        var matchesType = string.IsNullOrWhiteSpace(selectedTypeFilter) ||
                         (invoice.Type?.Equals(selectedTypeFilter, StringComparison.OrdinalIgnoreCase) ?? false);

        return matchesSearch && matchesStatus && matchesType;
    }

    private Color GetStatusColor(string status)
    {
        return status?.ToLower() switch
        {
            "paid" => Color.Success,
            "pending" => Color.Warning,
            "overdue" => Color.Error,
            "cancelled" => Color.Default,
            _ => Color.Default
        };
    }

    private Color GetTypeColor(string type)
    {
        return type?.ToLower() switch
        {
            "tuition" => Color.Primary,
            "library" => Color.Info,
            "laboratory" => Color.Warning,
            "sports" => Color.Success,
            "transportation" => Color.Default,
            "examination" => Color.Error,
            _ => Color.Default
        };
    }

    private Color GetDueDateColor(DateTime dueDate, string status)
    {
        if (status == "Paid") return Color.Default;
        
        var daysUntilDue = (dueDate - DateTime.Now).Days;
        
        if (daysUntilDue < 0)
            return Color.Error; // Overdue
        else if (daysUntilDue <= 3)
            return Color.Warning; // Due soon
        else
            return Color.Default; // Future
    }

    private void ShowCreateForm()
    {
        newInvoice = new CreateInvoiceRequest
        {
            DueDate = DateTime.Now.AddDays(30),
            Amount = 0,
            Type = "Tuition",
            Term = "Fall",
            AcademicYear = availableAcademicYears.FirstOrDefault() ?? ""
        };
        showCreateForm = true;
    }

    private void CancelCreate()
    {
        showCreateForm = false;
        newInvoice = new CreateInvoiceRequest();
    }

    private void SaveInvoice()
    {
        if (invoices != null && newInvoice.StudentId.HasValue && newInvoice.Amount > 0)
        {
            var selectedStudent = availableStudents.FirstOrDefault(s => s.Id == newInvoice.StudentId.Value);

            var invoice = new InvoiceResponse
            {
                Id = Guid.NewGuid(),
                InvoiceNumber = $"INV-{DateTime.Now.Year}-{invoices.Count + 1:D3}",
                StudentName = selectedStudent?.Name ?? "Unknown Student",
                Type = newInvoice.Type,
                Amount = newInvoice.Amount,
                DueDate = newInvoice.DueDate ?? DateTime.Now.AddDays(30),
                Status = "Pending",
                AcademicYear = newInvoice.AcademicYear,
                Term = newInvoice.Term,
                Description = newInvoice.Description,
                CreatedDate = DateTime.Now
            };

            invoices.Add(invoice);
            CancelCreate();
            StateHasChanged();
        }
    }

    private void MarkAsPaid(Guid invoiceId)
    {
        var invoice = invoices?.FirstOrDefault(i => i.Id == invoiceId);
        if (invoice != null)
        {
            invoice.Status = "Paid";
            StateHasChanged();
        }
    }

    private void DeleteInvoice(Guid invoiceId)
    {
        if (invoices != null)
        {
            invoices.RemoveAll(i => i.Id == invoiceId);
            StateHasChanged();
        }
    }

    // Simplified models
    public class CreateInvoiceRequest
    {
        public Guid? StudentId { get; set; }
        public string Type { get; set; } = "Tuition";
        public decimal Amount { get; set; }
        public DateTime? DueDate { get; set; } = DateTime.Now.AddDays(30);
        public string AcademicYear { get; set; } = "";
        public string Term { get; set; } = "Fall";
        public string Description { get; set; } = "";
    }

    public class InvoiceResponse
    {
        public Guid Id { get; set; }
        public string InvoiceNumber { get; set; } = "";
        public string StudentName { get; set; } = "";
        public string Type { get; set; } = "";
        public decimal Amount { get; set; }
        public DateTime DueDate { get; set; }
        public string Status { get; set; } = "";
        public string AcademicYear { get; set; } = "";
        public string Term { get; set; } = "";
        public string Description { get; set; } = "";
        public DateTime CreatedDate { get; set; }
    }

    public class StudentInfo
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string StudentId { get; set; } = "";
    }
}
