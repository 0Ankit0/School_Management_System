@page "/billing"

<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <div class="flex justify-between items-center">
                <h2 class="text-2xl font-bold text-gray-800">Billing Management</h2>
                <button @onclick="ShowCreateForm" class="btn btn-primary">
                    ‚ûï Create Invoice
                </button>
            </div>
        </div>
        
        <div class="card-body">
            @if (showCreateForm)
            {
                <div class="mb-6 p-4 bg-gray-50 rounded-lg">
                    <h3 class="text-lg font-semibold mb-4">Create New Invoice</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Student</label>
                            <select @bind="newInvoice.StudentId" class="form-control">
                                <option value="">Select a student</option>
                                @foreach (var student in availableStudents)
                                {
                                    <option value="@student.Id">@student.Name (@student.StudentId)</option>
                                }
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Type</label>
                            <select @bind="newInvoice.Type" class="form-control">
                                <option value="Tuition">Tuition Fee</option>
                                <option value="Library">Library Fee</option>
                                <option value="Laboratory">Laboratory Fee</option>
                                <option value="Sports">Sports Fee</option>
                                <option value="Transportation">Transportation Fee</option>
                                <option value="Examination">Examination Fee</option>
                                <option value="Miscellaneous">Miscellaneous</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Academic Year</label>
                            <select @bind="newInvoice.AcademicYear" class="form-control">
                                <option value="">Select academic year</option>
                                @foreach (var year in availableAcademicYears)
                                {
                                    <option value="@year">@year</option>
                                }
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Term</label>
                            <select @bind="newInvoice.Term" class="form-control">
                                <option value="Fall">Fall Term</option>
                                <option value="Spring">Spring Term</option>
                                <option value="Summer">Summer Term</option>
                                <option value="Annual">Annual</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Amount ($)</label>
                            <input type="number" @bind="newInvoice.Amount" class="form-control" placeholder="1000.00" min="0" step="0.01" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Due Date</label>
                            <input type="date" @bind="newInvoice.DueDate" class="form-control" />
                        </div>
                        <div class="col-span-2">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                            <textarea @bind="newInvoice.Description" class="form-control" rows="3" placeholder="Invoice description..."></textarea>
                        </div>
                    </div>
                    <div class="mt-4 flex gap-2">
                        <button @onclick="SaveInvoice" class="btn btn-success">üíæ Create Invoice</button>
                        <button @onclick="CancelCreate" class="btn btn-secondary">‚ùå Cancel</button>
                    </div>
                </div>
            }

            @if (invoices == null)
            {
                <div class="text-center py-12">
                    <div class="spinner"></div>
                    <p class="mt-4">Loading invoices...</p>
                </div>
            }
            else if (!invoices.Any())
            {
                <div class="text-center py-12">
                    <h3 class="text-lg font-semibold text-gray-600 mb-2">No Invoices Found</h3>
                    <p class="text-gray-500 mb-4">Start by creating your first invoice.</p>
                    <button @onclick="ShowCreateForm" class="btn btn-primary">
                        ‚ûï Create First Invoice
                    </button>
                </div>
            }
            else
            {
                <div class="mb-4">
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
                        <div class="bg-blue-50 p-4 rounded-lg">
                            <h4 class="font-semibold text-blue-800">Total Outstanding</h4>
                            <p class="text-2xl font-bold text-blue-600">${GetTotalOutstanding():F2}</p>
                        </div>
                        <div class="bg-green-50 p-4 rounded-lg">
                            <h4 class="font-semibold text-green-800">Total Paid</h4>
                            <p class="text-2xl font-bold text-green-600">${GetTotalPaid():F2}</p>
                        </div>
                        <div class="bg-yellow-50 p-4 rounded-lg">
                            <h4 class="font-semibold text-yellow-800">Overdue</h4>
                            <p class="text-2xl font-bold text-yellow-600">${GetTotalOverdue():F2}</p>
                        </div>
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <h4 class="font-semibold text-gray-800">Total Invoices</h4>
                            <p class="text-2xl font-bold text-gray-600">@invoices.Count()</p>
                        </div>
                    </div>

                    <div class="flex gap-4 mb-4">
                        <input type="text" @bind="searchTerm" @bind:event="oninput" 
                               placeholder="Search invoices..." 
                               class="form-control max-w-md" />
                        <select @bind="selectedStatusFilter" class="form-control max-w-xs">
                            <option value="">All Statuses</option>
                            <option value="Pending">Pending</option>
                            <option value="Paid">Paid</option>
                            <option value="Overdue">Overdue</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                        <select @bind="selectedTypeFilter" class="form-control max-w-xs">
                            <option value="">All Types</option>
                            <option value="Tuition">Tuition</option>
                            <option value="Library">Library</option>
                            <option value="Laboratory">Laboratory</option>
                            <option value="Sports">Sports</option>
                            <option value="Transportation">Transportation</option>
                            <option value="Examination">Examination</option>
                            <option value="Miscellaneous">Miscellaneous</option>
                        </select>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Invoice #</th>
                                <th>Student</th>
                                <th>Type</th>
                                <th>Amount</th>
                                <th>Due Date</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var invoice in filteredInvoices)
                            {
                                <tr>
                                    <td>
                                        <div class="font-medium">#@invoice.InvoiceNumber</div>
                                        <div class="text-sm text-gray-600">@invoice.AcademicYear - @invoice.Term</div>
                                    </td>
                                    <td>@invoice.StudentName</td>
                                    <td>
                                        <span class="badge @GetTypeBadgeClass(invoice.Type)">
                                            @invoice.Type
                                        </span>
                                    </td>
                                    <td class="font-medium">${invoice.Amount:F2}</td>
                                    <td>
                                        <div class="@GetDueDateClass(invoice.DueDate, invoice.Status)">
                                            @invoice.DueDate.ToString("MMM dd, yyyy")
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(invoice.Status)">
                                            @invoice.Status
                                        </span>
                                    </td>
                                    <td>@invoice.CreatedDate.ToString("MMM dd")</td>
                                    <td>
                                        <div class="btn-group">
                                            <a href="/invoices/@invoice.Id" class="btn btn-sm btn-info" title="View">üëÅÔ∏è</a>
                                            @if (invoice.Status == "Pending" || invoice.Status == "Overdue")
                                            {
                                                <button @onclick="(() => MarkAsPaid(invoice.Id))" class="btn btn-sm btn-success" title="Mark as Paid">üí∞</button>
                                            }
                                            <a href="/invoices/edit/@invoice.Id" class="btn btn-sm btn-warning" title="Edit">‚úèÔ∏è</a>
                                            <button @onclick="(() => DeleteInvoice(invoice.Id))" class="btn btn-sm btn-danger" title="Delete">üóëÔ∏è</button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="mt-4 text-sm text-gray-600">
                    Showing @filteredInvoices.Count() of @invoices.Count() invoices
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<InvoiceResponse>? invoices = new();
    private IEnumerable<InvoiceResponse> filteredInvoices => invoices?.Where(FilterInvoices) ?? new List<InvoiceResponse>();
    private string searchTerm = "";
    private string selectedStatusFilter = "";
    private string selectedTypeFilter = "";
    private bool showCreateForm = false;
    private CreateInvoiceRequest newInvoice = new();

    private List<StudentInfo> availableStudents = new();
    private List<string> availableAcademicYears = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await Task.Delay(500); // Simulate loading
        try
        {
            // Load students for dropdown
            availableStudents = new List<StudentInfo>
            {
                new StudentInfo { Id = Guid.NewGuid(), Name = "John Doe", StudentId = "STU001" },
                new StudentInfo { Id = Guid.NewGuid(), Name = "Jane Smith", StudentId = "STU002" },
                new StudentInfo { Id = Guid.NewGuid(), Name = "Mike Johnson", StudentId = "STU003" },
                new StudentInfo { Id = Guid.NewGuid(), Name = "Sarah Wilson", StudentId = "STU004" }
            };

            // Load academic years
            availableAcademicYears = new List<string>
            {
                "2024-2025",
                "2023-2024",
                "2022-2023"
            };

            // TODO: Replace with actual API call
            invoices = new List<InvoiceResponse>
            {
                new InvoiceResponse
                {
                    Id = Guid.NewGuid(),
                    InvoiceNumber = "INV-2024-001",
                    StudentName = "John Doe",
                    Type = "Tuition",
                    Amount = 2500.00m,
                    DueDate = DateTime.Now.AddDays(15),
                    Status = "Pending",
                    AcademicYear = "2024-2025",
                    Term = "Fall",
                    Description = "Fall semester tuition fee",
                    CreatedDate = DateTime.Now.AddDays(-5)
                },
                new InvoiceResponse
                {
                    Id = Guid.NewGuid(),
                    InvoiceNumber = "INV-2024-002",
                    StudentName = "Jane Smith",
                    Type = "Library",
                    Amount = 150.00m,
                    DueDate = DateTime.Now.AddDays(-2),
                    Status = "Overdue",
                    AcademicYear = "2024-2025",
                    Term = "Fall",
                    Description = "Library membership and book fees",
                    CreatedDate = DateTime.Now.AddDays(-20)
                },
                new InvoiceResponse
                {
                    Id = Guid.NewGuid(),
                    InvoiceNumber = "INV-2024-003",
                    StudentName = "Mike Johnson",
                    Type = "Laboratory",
                    Amount = 300.00m,
                    DueDate = DateTime.Now.AddDays(-10),
                    Status = "Paid",
                    AcademicYear = "2024-2025",
                    Term = "Fall",
                    Description = "Chemistry lab equipment and materials",
                    CreatedDate = DateTime.Now.AddDays(-30)
                }
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private decimal GetTotalOutstanding()
    {
        return invoices?.Where(i => i.Status == "Pending").Sum(i => i.Amount) ?? 0;
    }

    private decimal GetTotalPaid()
    {
        return invoices?.Where(i => i.Status == "Paid").Sum(i => i.Amount) ?? 0;
    }

    private decimal GetTotalOverdue()
    {
        return invoices?.Where(i => i.Status == "Overdue").Sum(i => i.Amount) ?? 0;
    }

    private bool FilterInvoices(InvoiceResponse invoice)
    {
        var matchesSearch = string.IsNullOrWhiteSpace(searchTerm) ||
                           (invoice.StudentName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                           (invoice.InvoiceNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                           (invoice.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false);

        var matchesStatus = string.IsNullOrWhiteSpace(selectedStatusFilter) ||
                           (invoice.Status?.Equals(selectedStatusFilter, StringComparison.OrdinalIgnoreCase) ?? false);

        var matchesType = string.IsNullOrWhiteSpace(selectedTypeFilter) ||
                         (invoice.Type?.Equals(selectedTypeFilter, StringComparison.OrdinalIgnoreCase) ?? false);

        return matchesSearch && matchesStatus && matchesType;
    }

    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "paid" => "badge-success",
            "pending" => "badge-warning",
            "overdue" => "badge-danger",
            "cancelled" => "badge-secondary",
            _ => "badge-secondary"
        };
    }

    private string GetTypeBadgeClass(string type)
    {
        return type?.ToLower() switch
        {
            "tuition" => "badge-primary",
            "library" => "badge-info",
            "laboratory" => "badge-warning",
            "sports" => "badge-success",
            "transportation" => "badge-secondary",
            "examination" => "badge-danger",
            _ => "badge-secondary"
        };
    }

    private string GetDueDateClass(DateTime dueDate, string status)
    {
        if (status == "Paid") return "text-gray-700";
        
        var daysUntilDue = (dueDate - DateTime.Now).Days;
        
        if (daysUntilDue < 0)
            return "text-red-600 font-semibold"; // Overdue
        else if (daysUntilDue <= 3)
            return "text-orange-600 font-semibold"; // Due soon
        else
            return "text-gray-700"; // Future
    }

    private void ShowCreateForm()
    {
        newInvoice = new CreateInvoiceRequest
        {
            DueDate = DateTime.Now.AddDays(30),
            Amount = 0,
            Type = "Tuition",
            Term = "Fall",
            AcademicYear = availableAcademicYears.FirstOrDefault() ?? ""
        };
        showCreateForm = true;
    }

    private void CancelCreate()
    {
        showCreateForm = false;
        newInvoice = new CreateInvoiceRequest();
    }

    private void SaveInvoice()
    {
        if (invoices != null && !string.IsNullOrWhiteSpace(newInvoice.StudentId) && newInvoice.Amount > 0)
        {
            var selectedStudent = availableStudents.FirstOrDefault(s => s.Id.ToString() == newInvoice.StudentId);

            var invoice = new InvoiceResponse
            {
                Id = Guid.NewGuid(),
                InvoiceNumber = $"INV-{DateTime.Now.Year}-{invoices.Count + 1:D3}",
                StudentName = selectedStudent?.Name ?? "Unknown Student",
                Type = newInvoice.Type,
                Amount = newInvoice.Amount,
                DueDate = newInvoice.DueDate,
                Status = "Pending",
                AcademicYear = newInvoice.AcademicYear,
                Term = newInvoice.Term,
                Description = newInvoice.Description,
                CreatedDate = DateTime.Now
            };

            invoices.Add(invoice);
            CancelCreate();
            StateHasChanged();
        }
    }

    private void MarkAsPaid(Guid invoiceId)
    {
        var invoice = invoices?.FirstOrDefault(i => i.Id == invoiceId);
        if (invoice != null)
        {
            invoice.Status = "Paid";
            StateHasChanged();
        }
    }

    private void DeleteInvoice(Guid invoiceId)
    {
        if (invoices != null)
        {
            invoices.RemoveAll(i => i.Id == invoiceId);
            StateHasChanged();
        }
    }

    // Simplified models
    public class CreateInvoiceRequest
    {
        public string StudentId { get; set; } = "";
        public string Type { get; set; } = "Tuition";
        public decimal Amount { get; set; }
        public DateTime DueDate { get; set; } = DateTime.Now.AddDays(30);
        public string AcademicYear { get; set; } = "";
        public string Term { get; set; } = "Fall";
        public string Description { get; set; } = "";
    }

    public class InvoiceResponse
    {
        public Guid Id { get; set; }
        public string InvoiceNumber { get; set; } = "";
        public string StudentName { get; set; } = "";
        public string Type { get; set; } = "";
        public decimal Amount { get; set; }
        public DateTime DueDate { get; set; }
        public string Status { get; set; } = "";
        public string AcademicYear { get; set; } = "";
        public string Term { get; set; } = "";
        public string Description { get; set; } = "";
        public DateTime CreatedDate { get; set; }
    }

    public class StudentInfo
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string StudentId { get; set; } = "";
    }
}
