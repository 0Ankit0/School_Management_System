@page "/attendance"

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper Class="pa-6" Elevation="3">
        <div class="d-flex justify-space-between align-center mb-6">
            <MudText Typo="Typo.h4" Class="font-weight-bold">Attendance Management</MudText>
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      StartIcon="Icons.Material.Filled.Add"
                      OnClick="ShowCreateForm">
                Mark Attendance
            </MudButton>
        </div>
        
        @if (showCreateForm)
        {
            <MudPaper Class="mb-6 pa-4" Elevation="1" Style="background-color: var(--mud-palette-grey-lighten5);">
                <MudText Typo="Typo.h5" Class="mb-4">Mark Attendance</MudText>
                <MudGrid Class="mb-4">
                    <MudItem xs="12" md="4">
                        <MudSelect T="string" Value="selectedClassForAttendance" 
                                  Label="Class"
                                  Variant="Variant.Outlined"
                                  ValueChanged="OnClassChanged">
                            <MudSelectItem T="string" Value="@("")">Select a class</MudSelectItem>
                            @foreach (var classInfo in availableClasses)
                            {
                                <MudSelectItem T="string" Value="@classInfo.Id.ToString()">@classInfo.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudDatePicker @bind-Date="attendanceDate" 
                                      Label="Date" 
                                      Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudSelect T="string" @bind-Value="selectedTimeSlot" 
                                  Label="Time Slot"
                                  Variant="Variant.Outlined">
                            <MudSelectItem T="string" Value="@("Morning")">Morning (8:00 AM - 12:00 PM)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Afternoon")">Afternoon (12:00 PM - 4:00 PM)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("Evening")">Evening (4:00 PM - 8:00 PM)</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                @if (!string.IsNullOrEmpty(selectedClassForAttendance) && studentsInClass.Any())
                {
                    <MudCard Class="mb-4" Elevation="2">
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" Class="d-flex justify-space-between align-center mb-4">
                                    <MudText Typo="Typo.h6" Class="font-weight-bold">Mark Student Attendance</MudText>
                                    <div class="d-flex gap-2">
                                        <MudButton Size="Size.Small" 
                                                  Variant="Variant.Outlined" 
                                                  Color="Color.Success"
                                                  OnClick="MarkAllPresent">
                                            Mark All Present
                                        </MudButton>
                                        <MudButton Size="Size.Small" 
                                                  Variant="Variant.Outlined" 
                                                  Color="Color.Error"
                                                  OnClick="MarkAllAbsent">
                                            Mark All Absent
                                        </MudButton>
                                    </div>
                                </MudItem>

                                @foreach (var student in studentsInClass)
                                {
                                    <MudItem xs="12" sm="6" md="4" lg="3" Class="mb-3">
                                        <MudPaper Class="pa-3" Elevation="1">
                                            <MudText Typo="Typo.subtitle1" Class="font-weight-medium mb-2">@student.Name</MudText>
                                            <MudRadioGroup T="string" @bind-Value="student.Status">
                                                <MudRadio T="string" Value="@("Present")" Color="Color.Success">Present</MudRadio>
                                                <MudRadio T="string" Value="@("Absent")" Color="Color.Error">Absent</MudRadio>
                                                <MudRadio T="string" Value="@("Late")" Color="Color.Warning">Late</MudRadio>
                                            </MudRadioGroup>
                                        </MudPaper>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                }

                <div class="d-flex gap-2">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Success" 
                              StartIcon="Icons.Material.Filled.Save"
                              OnClick="SaveAttendance"
                              Disabled="@(!studentsInClass.Any() || string.IsNullOrEmpty(selectedClassForAttendance))">
                        Save Attendance
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" 
                              StartIcon="Icons.Material.Filled.Cancel"
                              OnClick="CancelCreate">
                        Cancel
                    </MudButton>
                </div>
            </MudPaper>
        }

        @if (attendanceRecords == null)
        {
            <div class="text-center py-12">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                <MudText Class="mt-4">Loading attendance records...</MudText>
            </div>
        }
        else if (!attendanceRecords.Any())
        {
            <div class="text-center py-12">
                <MudText Typo="Typo.h5" Class="text-gray-600 mb-2">No Attendance Records Found</MudText>
                <MudText Class="text-gray-500 mb-4">Start by marking attendance for a class.</MudText>
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="Icons.Material.Filled.Add"
                          OnClick="ShowCreateForm">
                    Mark First Attendance
                </MudButton>
            </div>
        }
        else
        {
            <div class="mb-4 d-flex gap-4 flex-wrap">
                <MudTextField @bind-Value="searchTerm" 
                             @bind-Value:event="oninput"
                             Label="Search attendance..." 
                             Variant="Variant.Outlined"
                             Adornment="Adornment.Start"
                             AdornmentIcon="Icons.Material.Filled.Search"
                             Class="flex-grow-1" />
                <MudSelect T="string" @bind-Value="selectedClassFilter" 
                          Label="Filter by Class"
                          Variant="Variant.Outlined"
                          Class="min-width-200">
                    <MudSelectItem T="string" Value="@("")">All Classes</MudSelectItem>
                    @foreach (var classInfo in availableClasses)
                    {
                        <MudSelectItem T="string" Value="@classInfo.Name">@classInfo.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="string" @bind-Value="selectedStatusFilter" 
                          Label="Filter by Status"
                          Variant="Variant.Outlined"
                          Class="min-width-200">
                    <MudSelectItem T="string" Value="@("")">All Statuses</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Present")">Present</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Absent")">Absent</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Late")">Late</MudSelectItem>
                </MudSelect>
            </div>

            <!-- Desktop Table View -->
            <div class="d-none d-md-block">
                <MudTable Items="@filteredAttendanceRecords" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@(attendanceRecords == null)" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>Date</MudTh>
                        <MudTh>Student</MudTh>
                        <MudTh>Class</MudTh>
                        <MudTh>Time Slot</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Marked By</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Date">@context.Date.ToString("MMM dd, yyyy")</MudTd>
                        <MudTd DataLabel="Student">@context.StudentName</MudTd>
                        <MudTd DataLabel="Class">@context.ClassName</MudTd>
                        <MudTd DataLabel="Time Slot">@context.TimeSlot</MudTd>
                        <MudTd DataLabel="Status">
                            <MudChip T="string" Color="@GetAttendanceStatusColor(context.Status)" Size="Size.Small">
                                @context.Status
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Marked By">@context.MarkedBy</MudTd>
                        <MudTd DataLabel="Actions">
                            <MudButtonGroup Variant="Variant.Text" Size="Size.Small">
                                <MudIconButton Icon="Icons.Material.Filled.Visibility" 
                                              Color="Color.Info" 
                                              Href="@($"/attendance/{context.Id}")" />
                                <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                              Color="Color.Warning" 
                                              OnClick="@(() => EditAttendance(context.Id))" />
                                <MudIconButton Icon="Icons.Material.Filled.Delete" 
                                              Color="Color.Error" 
                                              OnClick="@(() => DeleteAttendance(context.Id))" />
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </div>

            <!-- Mobile Card View -->
            <div class="d-block d-md-none">
                <MudGrid>
                    @foreach (var record in filteredAttendanceRecords)
                    {
                        <MudItem xs="12">
                            <MudCard Elevation="3" Class="mb-3">
                                <MudCardContent>
                                    <div class="d-flex justify-space-between align-start mb-3">
                                        <div class="flex-grow-1">
                                            <MudText Typo="Typo.h6" Class="font-weight-bold">@record.StudentName</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">@record.ClassName</MudText>
                                        </div>
                                        <MudChip T="string" Color="@GetAttendanceStatusColor(record.Status)" Size="Size.Small">
                                            @record.Status
                                        </MudChip>
                                    </div>
                                    
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Date</MudText>
                                            <MudText Typo="Typo.body2">@record.Date.ToString("MMM dd, yyyy")</MudText>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Time Slot</MudText>
                                            <MudText Typo="Typo.body2">@record.TimeSlot</MudText>
                                        </MudItem>
                                        <MudItem xs="12">
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Marked By</MudText>
                                            <MudText Typo="Typo.body2">@record.MarkedBy</MudText>
                                        </MudItem>
                                    </MudGrid>
                                </MudCardContent>
                                
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Info" 
                                              StartIcon="Icons.Material.Filled.Visibility"
                                              Href="@($"/attendance/{record.Id}")">
                                        View
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Warning" 
                                              StartIcon="Icons.Material.Filled.Edit"
                                              OnClick="@(() => EditAttendance(record.Id))">
                                        Edit
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Error" 
                                              StartIcon="Icons.Material.Filled.Delete"
                                              OnClick="@(() => DeleteAttendance(record.Id))">
                                        Delete
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </div>

            <MudText Class="mt-4 text-sm text-gray-600">
                Showing @filteredAttendanceRecords.Count() of @(attendanceRecords?.Count ?? 0) attendance records
            </MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    private List<AttendanceResponse>? attendanceRecords = new();
    private IEnumerable<AttendanceResponse> filteredAttendanceRecords => attendanceRecords?.Where(FilterAttendance) ?? new List<AttendanceResponse>();
    private string searchTerm = "";
    private string selectedClassFilter = "";
    private string selectedStatusFilter = "";
    private bool showCreateForm = false;

    private List<ClassInfo> availableClasses = new();
    private List<StudentAttendanceInfo> studentsInClass = new();
    private string selectedClassForAttendance = "";
    private DateTime? attendanceDate = DateTime.Today;
    private string selectedTimeSlot = "Morning";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await Task.Delay(500); // Simulate loading
        try
        {
            // Load classes for dropdown
            availableClasses = new List<ClassInfo>
            {
                new ClassInfo { Id = Guid.NewGuid(), Name = "Grade 9A - Mathematics" },
                new ClassInfo { Id = Guid.NewGuid(), Name = "Grade 10B - Science" },
                new ClassInfo { Id = Guid.NewGuid(), Name = "Grade 11A - English" },
                new ClassInfo { Id = Guid.NewGuid(), Name = "Grade 12B - History" }
            };

            // TODO: Replace with actual API call
            attendanceRecords = new List<AttendanceResponse>
            {
                new AttendanceResponse
                {
                    Id = Guid.NewGuid(),
                    Date = DateTime.Today,
                    StudentName = "John Doe",
                    ClassName = "Grade 9A - Mathematics",
                    TimeSlot = "Morning",
                    Status = "Present",
                    MarkedBy = "Teacher Smith"
                },
                new AttendanceResponse
                {
                    Id = Guid.NewGuid(),
                    Date = DateTime.Today,
                    StudentName = "Jane Smith",
                    ClassName = "Grade 9A - Mathematics",
                    TimeSlot = "Morning",
                    Status = "Absent",
                    MarkedBy = "Teacher Smith"
                },
                new AttendanceResponse
                {
                    Id = Guid.NewGuid(),
                    Date = DateTime.Today.AddDays(-1),
                    StudentName = "Mike Johnson",
                    ClassName = "Grade 10B - Science",
                    TimeSlot = "Afternoon",
                    Status = "Late",
                    MarkedBy = "Teacher Brown"
                }
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task OnClassChanged(string classId)
    {
        selectedClassForAttendance = classId;
        if (!string.IsNullOrEmpty(selectedClassForAttendance))
        {
            await LoadStudentsInClass();
        }
        else
        {
            studentsInClass.Clear();
        }
    }

    private async Task LoadStudentsInClass()
    {
        await Task.Delay(300); // Simulate loading
        
        // TODO: Replace with actual API call to get students in the selected class
        studentsInClass = new List<StudentAttendanceInfo>
        {
            new StudentAttendanceInfo { Id = Guid.NewGuid(), Name = "John Doe", Status = "" },
            new StudentAttendanceInfo { Id = Guid.NewGuid(), Name = "Jane Smith", Status = "" },
            new StudentAttendanceInfo { Id = Guid.NewGuid(), Name = "Mike Johnson", Status = "" },
            new StudentAttendanceInfo { Id = Guid.NewGuid(), Name = "Sarah Wilson", Status = "" },
            new StudentAttendanceInfo { Id = Guid.NewGuid(), Name = "Tom Brown", Status = "" }
        };
        
        StateHasChanged();
    }

    private void UpdateStudentAttendance(Guid studentId, string status)
    {
        var student = studentsInClass.FirstOrDefault(s => s.Id == studentId);
        if (student != null)
        {
            student.Status = status;
        }
    }

    private void MarkAllPresent()
    {
        foreach (var student in studentsInClass)
        {
            student.Status = "Present";
        }
        StateHasChanged();
    }

    private void MarkAllAbsent()
    {
        foreach (var student in studentsInClass)
        {
            student.Status = "Absent";
        }
        StateHasChanged();
    }

    private bool FilterAttendance(AttendanceResponse record)
    {
        var matchesSearch = string.IsNullOrWhiteSpace(searchTerm) ||
                           (record.StudentName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                           (record.ClassName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false);

        var matchesClass = string.IsNullOrWhiteSpace(selectedClassFilter) ||
                          (record.ClassName?.Equals(selectedClassFilter, StringComparison.OrdinalIgnoreCase) ?? false);

        var matchesStatus = string.IsNullOrWhiteSpace(selectedStatusFilter) ||
                           (record.Status?.Equals(selectedStatusFilter, StringComparison.OrdinalIgnoreCase) ?? false);

        return matchesSearch && matchesClass && matchesStatus;
    }

    private Color GetAttendanceStatusColor(string status)
    {
        return status?.ToLower() switch
        {
            "present" => Color.Success,
            "absent" => Color.Error,
            "late" => Color.Warning,
            _ => Color.Default
        };
    }

    private void ShowCreateForm()
    {
        selectedClassForAttendance = "";
        attendanceDate = DateTime.Today;
        selectedTimeSlot = "Morning";
        studentsInClass.Clear();
        showCreateForm = true;
    }

    private void CancelCreate()
    {
        showCreateForm = false;
        selectedClassForAttendance = "";
        studentsInClass.Clear();
    }

    private void SaveAttendance()
    {
        if (attendanceRecords != null && !string.IsNullOrEmpty(selectedClassForAttendance) && studentsInClass.Any())
        {
            var selectedClass = availableClasses.FirstOrDefault(c => c.Id.ToString() == selectedClassForAttendance);

            foreach (var student in studentsInClass.Where(s => !string.IsNullOrEmpty(s.Status)))
            {
                var record = new AttendanceResponse
                {
                    Id = Guid.NewGuid(),
                    Date = attendanceDate ?? DateTime.Today,
                    StudentName = student.Name,
                    ClassName = selectedClass?.Name ?? "Unknown Class",
                    TimeSlot = selectedTimeSlot,
                    Status = student.Status,
                    MarkedBy = "Current User" // TODO: Get current user
                };

                attendanceRecords.Add(record);
            }

            CancelCreate();
            StateHasChanged();
        }
    }

    private void EditAttendance(Guid recordId)
    {
        // TODO: Implement edit functionality
    }

    private void DeleteAttendance(Guid recordId)
    {
        if (attendanceRecords != null)
        {
            attendanceRecords.RemoveAll(r => r.Id == recordId);
            StateHasChanged();
        }
    }

    // Simplified models
    public class AttendanceResponse
    {
        public Guid Id { get; set; }
        public DateTime Date { get; set; }
        public string StudentName { get; set; } = "";
        public string ClassName { get; set; } = "";
        public string TimeSlot { get; set; } = "";
        public string Status { get; set; } = "";
        public string MarkedBy { get; set; } = "";
    }

    public class ClassInfo
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
    }

    public class StudentAttendanceInfo
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string Status { get; set; } = "";
    }
}
