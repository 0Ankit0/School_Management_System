@page "/courses"

<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <div class="flex justify-between items-center">
                <h2 class="text-2xl font-bold text-gray-800">Courses Management</h2>
                <button @onclick="ShowCreateForm" class="btn btn-primary">
                    ➕ Add Course
                </button>
            </div>
        </div>
        
        <div class="card-body">
            @if (showCreateForm)
            {
                <div class="mb-6 p-4 bg-gray-50 rounded-lg">
                    <h3 class="text-lg font-semibold mb-4">Add New Course</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Course Name</label>
                            <input type="text" @bind="newCourse.Name" class="form-control" placeholder="e.g., Algebra I" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Course Code</label>
                            <input type="text" @bind="newCourse.Code" class="form-control" placeholder="e.g., MATH101" />
                        </div>
                        <div class="col-span-2">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                            <textarea @bind="newCourse.Description" class="form-control" rows="3" placeholder="Course description..."></textarea>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Credits</label>
                            <input type="number" @bind="newCourse.Credits" class="form-control" placeholder="3" min="1" max="6" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Department</label>
                            <input type="text" @bind="newCourse.Department" class="form-control" placeholder="e.g., Mathematics" />
                        </div>
                    </div>
                    <div class="mt-4 flex gap-2">
                        <button @onclick="SaveCourse" class="btn btn-success">💾 Save</button>
                        <button @onclick="CancelCreate" class="btn btn-secondary">❌ Cancel</button>
                    </div>
                </div>
            }

            @if (courses == null)
            {
                <div class="text-center py-12">
                    <div class="spinner"></div>
                    <p class="mt-4">Loading courses...</p>
                </div>
            }
            else if (!courses.Any())
            {
                <div class="text-center py-12">
                    <h3 class="text-lg font-semibold text-gray-600 mb-2">No Courses Found</h3>
                    <p class="text-gray-500 mb-4">Start by adding your first course to the system.</p>
                    <button @onclick="ShowCreateForm" class="btn btn-primary">
                        ➕ Add First Course
                    </button>
                </div>
            }
            else
            {
                <div class="mb-4">
                    <input type="text" @bind="searchTerm" @bind:event="oninput" 
                           placeholder="Search courses..." 
                           class="form-control max-w-md" />
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    @foreach (var course in filteredCourses)
                    {
                        <div class="card border border-gray-200">
                            <div class="card-body">
                                <div class="flex justify-between items-start mb-3">
                                    <h4 class="text-lg font-semibold text-gray-800">@course.Name</h4>
                                    <span class="badge badge-primary">@course.Code</span>
                                </div>
                                
                                <p class="text-sm text-gray-600 mb-3">@course.Description</p>
                                
                                <div class="flex justify-between text-sm text-gray-500 mb-4">
                                    <span><strong>Credits:</strong> @course.Credits</span>
                                    <span><strong>Dept:</strong> @course.Department</span>
                                </div>
                                
                                <div class="flex gap-2">
                                    <a href="/courses/@course.Id" class="btn btn-sm btn-info">👁️ View</a>
                                    <a href="/courses/edit/@course.Id" class="btn btn-sm btn-warning">✏️ Edit</a>
                                    <button @onclick="(() => DeleteCourse(course.Id))" class="btn btn-sm btn-danger">🗑️ Delete</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="mt-4 text-sm text-gray-600">
                    Showing @filteredCourses.Count() of @courses.Count() courses
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<CourseResponse>? courses = new();
    private IEnumerable<CourseResponse> filteredCourses => courses?.Where(FilterCourses) ?? new List<CourseResponse>();
    private string searchTerm = "";
    private bool showCreateForm = false;
    private CreateCourseRequest newCourse = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        await Task.Delay(500); // Simulate loading
        try
        {
            // TODO: Replace with actual API call
            courses = new List<CourseResponse>
            {
                new CourseResponse
                {
                    Id = Guid.NewGuid(),
                    Name = "Algebra I",
                    Code = "MATH101",
                    Description = "Introduction to basic algebraic concepts and problem-solving techniques.",
                    Credits = 3,
                    Department = "Mathematics"
                },
                new CourseResponse
                {
                    Id = Guid.NewGuid(),
                    Name = "Biology Fundamentals",
                    Code = "BIO101",
                    Description = "Basic principles of biology including cell structure, genetics, and ecology.",
                    Credits = 4,
                    Department = "Science"
                },
                new CourseResponse
                {
                    Id = Guid.NewGuid(),
                    Name = "English Literature",
                    Code = "ENG201",
                    Description = "Analysis of classic and contemporary literary works.",
                    Credits = 3,
                    Department = "English"
                },
                new CourseResponse
                {
                    Id = Guid.NewGuid(),
                    Name = "World History",
                    Code = "HIST101",
                    Description = "Survey of major historical events and civilizations.",
                    Credits = 3,
                    Department = "History"
                }
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading courses: {ex.Message}");
        }
    }

    private bool FilterCourses(CourseResponse course)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return true;

        return (course.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (course.Code?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (course.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (course.Department?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false);
    }

    private void ShowCreateForm()
    {
        newCourse = new CreateCourseRequest();
        showCreateForm = true;
    }

    private void CancelCreate()
    {
        showCreateForm = false;
        newCourse = new CreateCourseRequest();
    }

    private void SaveCourse()
    {
        if (courses != null && !string.IsNullOrWhiteSpace(newCourse.Name) && !string.IsNullOrWhiteSpace(newCourse.Code))
        {
            var course = new CourseResponse
            {
                Id = Guid.NewGuid(),
                Name = newCourse.Name,
                Code = newCourse.Code,
                Description = newCourse.Description,
                Credits = newCourse.Credits,
                Department = newCourse.Department
            };

            courses.Add(course);
            CancelCreate();
            StateHasChanged();
        }
    }

    private void DeleteCourse(Guid courseId)
    {
        if (courses != null)
        {
            courses.RemoveAll(c => c.Id == courseId);
            StateHasChanged();
        }
    }

    // Simplified model for the form
    public class CreateCourseRequest
    {
        public string Name { get; set; } = "";
        public string Code { get; set; } = "";
        public string Description { get; set; } = "";
        public int Credits { get; set; } = 3;
        public string Department { get; set; } = "";
    }

    public class CourseResponse
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string Code { get; set; } = "";
        public string Description { get; set; } = "";
        public int Credits { get; set; }
        public string Department { get; set; } = "";
    }
}
