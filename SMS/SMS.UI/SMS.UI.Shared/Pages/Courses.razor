@page "/courses"

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudPaper Class="pa-6" Elevation="3">
        <div class="d-flex justify-space-between align-center mb-6">
            <MudText Typo="Typo.h4" Class="font-weight-bold">Courses Management</MudText>
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      StartIcon="Icons.Material.Filled.Add"
                      OnClick="ShowCreateForm">
                Add Course
            </MudButton>
        </div>
        
        @if (showCreateForm)
        {
            <MudPaper Class="mb-6 pa-4" Elevation="1" Style="background-color: var(--mud-palette-grey-lighten5);">
                <MudText Typo="Typo.h5" Class="mb-4">Add New Course</MudText>
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="newCourse.Name" 
                                     Label="Course Name" 
                                     Placeholder="e.g., Algebra I"
                                     Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="newCourse.Code" 
                                     Label="Course Code" 
                                     Placeholder="e.g., MATH101"
                                     Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="newCourse.Description" 
                                     Label="Description" 
                                     Placeholder="Course description..."
                                     Lines="3"
                                     Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudNumericField @bind-Value="newCourse.Credits" 
                                        Label="Credits" 
                                        Min="1" Max="6"
                                        Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="newCourse.Department" 
                                     Label="Department" 
                                     Placeholder="e.g., Mathematics"
                                     Variant="Variant.Outlined" />
                    </MudItem>
                </MudGrid>
                <div class="mt-4 d-flex gap-2">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Success" 
                              StartIcon="Icons.Material.Filled.Save"
                              OnClick="SaveCourse">
                        Save
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" 
                              Color="Color.Default"
                              StartIcon="Icons.Material.Filled.Cancel"
                              OnClick="CancelCreate">
                        Cancel
                    </MudButton>
                </div>
            </MudPaper>
        }

        @if (courses == null)
        {
            <div class="text-center py-12">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                <MudText Class="mt-4">Loading courses...</MudText>
            </div>
        }
        else if (!courses.Any())
        {
            <div class="text-center py-12">
                <MudText Typo="Typo.h5" Class="text-gray-600 mb-2">No Courses Found</MudText>
                <MudText Class="text-gray-500 mb-4">Start by adding your first course to the system.</MudText>
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="Icons.Material.Filled.Add"
                          OnClick="ShowCreateForm">
                    Add First Course
                </MudButton>
            </div>
        }
        else
        {
            <div class="mb-4">
                <MudTextField @bind-Value="searchTerm" 
                             @bind-Value:event="oninput"
                             Label="Search courses..." 
                             Variant="Variant.Outlined"
                             Adornment="Adornment.Start"
                             AdornmentIcon="Icons.Material.Filled.Search"
                             Class="max-w-md" />
            </div>

            <MudGrid>
                @foreach (var course in filteredCourses)
                {
                    <MudItem xs="12" md="6" lg="4">
                        <MudCard Elevation="3" Class="mb-3">
                            <MudCardContent>
                                <div class="d-flex justify-space-between align-start mb-3">
                                    <MudText Typo="Typo.h6" Class="font-weight-bold">@course.Name</MudText>
                                    <MudChip T="string" Color="Color.Primary" Size="Size.Small">@course.Code</MudChip>
                                </div>
                                
                                <MudText Typo="Typo.body2" Class="text-gray-600 mb-3">@course.Description</MudText>
                                
                                <div class="d-flex justify-space-between mb-4">
                                    <MudText Typo="Typo.body2">
                                        <strong>Credits:</strong> @course.Credits
                                    </MudText>
                                    <MudText Typo="Typo.body2">
                                        <strong>Dept:</strong> @course.Department
                                    </MudText>
                                </div>
                            </MudCardContent>
                            
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" 
                                          Color="Color.Info" 
                                          StartIcon="Icons.Material.Filled.Visibility"
                                          Href="@($"/courses/{course.Id}")">
                                    View
                                </MudButton>
                                <MudButton Variant="Variant.Text" 
                                          Color="Color.Warning" 
                                          StartIcon="Icons.Material.Filled.Edit"
                                          Href="@($"/courses/edit/{course.Id}")">
                                    Edit
                                </MudButton>
                                <MudButton Variant="Variant.Text" 
                                          Color="Color.Error" 
                                          StartIcon="Icons.Material.Filled.Delete"
                                          OnClick="@(() => DeleteCourse(course.Id))">
                                    Delete
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>

            <MudText Class="mt-4 text-sm text-gray-600">
                Showing @filteredCourses.Count() of @courses.Count() courses
            </MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    private List<CourseResponse>? courses = new();
    private IEnumerable<CourseResponse> filteredCourses => courses?.Where(FilterCourses) ?? new List<CourseResponse>();
    private string searchTerm = "";
    private bool showCreateForm = false;
    private CreateCourseRequest newCourse = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        await Task.Delay(500); // Simulate loading
        try
        {
            // TODO: Replace with actual API call
            courses = new List<CourseResponse>
            {
                new CourseResponse
                {
                    Id = Guid.NewGuid(),
                    Name = "Algebra I",
                    Code = "MATH101",
                    Description = "Introduction to basic algebraic concepts and problem-solving techniques.",
                    Credits = 3,
                    Department = "Mathematics"
                },
                new CourseResponse
                {
                    Id = Guid.NewGuid(),
                    Name = "Biology Fundamentals",
                    Code = "BIO101",
                    Description = "Basic principles of biology including cell structure, genetics, and ecology.",
                    Credits = 4,
                    Department = "Science"
                },
                new CourseResponse
                {
                    Id = Guid.NewGuid(),
                    Name = "English Literature",
                    Code = "ENG201",
                    Description = "Analysis of classic and contemporary literary works.",
                    Credits = 3,
                    Department = "English"
                },
                new CourseResponse
                {
                    Id = Guid.NewGuid(),
                    Name = "World History",
                    Code = "HIST101",
                    Description = "Survey of major historical events and civilizations.",
                    Credits = 3,
                    Department = "History"
                }
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading courses: {ex.Message}");
        }
    }

    private bool FilterCourses(CourseResponse course)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return true;

        return (course.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (course.Code?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (course.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (course.Department?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false);
    }

    private void ShowCreateForm()
    {
        newCourse = new CreateCourseRequest();
        showCreateForm = true;
    }

    private void CancelCreate()
    {
        showCreateForm = false;
        newCourse = new CreateCourseRequest();
    }

    private void SaveCourse()
    {
        if (courses != null && !string.IsNullOrWhiteSpace(newCourse.Name) && !string.IsNullOrWhiteSpace(newCourse.Code))
        {
            var course = new CourseResponse
            {
                Id = Guid.NewGuid(),
                Name = newCourse.Name,
                Code = newCourse.Code,
                Description = newCourse.Description,
                Credits = newCourse.Credits,
                Department = newCourse.Department
            };

            courses.Add(course);
            CancelCreate();
            StateHasChanged();
        }
    }

    private void DeleteCourse(Guid courseId)
    {
        if (courses != null)
        {
            courses.RemoveAll(c => c.Id == courseId);
            StateHasChanged();
        }
    }

    // Simplified model for the form
    public class CreateCourseRequest
    {
        public string Name { get; set; } = "";
        public string Code { get; set; } = "";
        public string Description { get; set; } = "";
        public int Credits { get; set; } = 3;
        public string Department { get; set; } = "";
    }

    public class CourseResponse
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string Code { get; set; } = "";
        public string Description { get; set; } = "";
        public int Credits { get; set; }
        public string Department { get; set; } = "";
    }
}
