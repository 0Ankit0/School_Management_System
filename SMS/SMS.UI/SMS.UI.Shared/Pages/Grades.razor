@page "/grades"

<MudContainer Class="mt-4">
    <MudPaper Elevation="3" Class="pa-6">
        <div class="d-flex justify-space-between align-center mb-6">
            <MudText Typo="Typo.h3" Color="Color.Primary">Grades Management</MudText>
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      StartIcon="Icons.Material.Filled.Add"
                      OnClick="ShowCreateForm">
                Add Grade
            </MudButton>
        </div>
        
        @if (showCreateForm)
        {
            <MudPaper Elevation="2" Class="pa-4 mb-6" Style="background-color: var(--mud-palette-grey-lighten5);">
                <MudText Typo="Typo.h5" Class="mb-4">Add New Grade</MudText>
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudSelect T="Guid?" @bind-Value="newGrade.StudentId" 
                                  Label="Student"
                                  Variant="Variant.Outlined">
                            <MudSelectItem T="Guid?" Value="null">Select a student</MudSelectItem>
                            @foreach (var student in availableStudents)
                            {
                                <MudSelectItem T="Guid?" Value="student.Id">@student.FirstName @student.LastName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect T="Guid?" @bind-Value="newGrade.CourseId" 
                                  Label="Course"
                                  Variant="Variant.Outlined">
                            <MudSelectItem T="Guid?" Value="null">Select a course</MudSelectItem>
                            @foreach (var course in availableCourses)
                            {
                                <MudSelectItem T="Guid?" Value="course.Id">@course.Name (@course.Code)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudSelect T="string" @bind-Value="newGrade.Grade" 
                                  Label="Grade"
                                  Variant="Variant.Outlined">
                            <MudSelectItem T="string" Value="@("A+")">A+ (97-100)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("A")">A (93-96)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("A-")">A- (90-92)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("B+")">B+ (87-89)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("B")">B (83-86)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("B-")">B- (80-82)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("C+")">C+ (77-79)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("C")">C (73-76)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("C-")">C- (70-72)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("D")">D (60-69)</MudSelectItem>
                            <MudSelectItem T="string" Value="@("F")">F (0-59)</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudNumericField T="decimal" @bind-Value="newGrade.Points" 
                                        Label="Points" 
                                        Variant="Variant.Outlined"
                                        Min="0"
                                        Max="100"
                                        Step="0.1m"
                                        Format="N1" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="newGrade.Comments" 
                                     Label="Comments"
                                     Variant="Variant.Outlined"
                                     Lines="3"
                                     Placeholder="Optional comments about the grade..." />
                    </MudItem>
                </MudGrid>
                <div class="d-flex gap-2 mt-4">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Success" 
                              StartIcon="Icons.Material.Filled.Save"
                              OnClick="SaveGrade">
                        Save
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" 
                              StartIcon="Icons.Material.Filled.Cancel"
                              OnClick="CancelCreate">
                        Cancel
                    </MudButton>
                </div>
            </MudPaper>
        }

        @if (grades == null)
        {
            <div class="text-center py-12">
                <MudProgressCircular Indeterminate="true" />
                <MudText Class="mt-4">Loading grades...</MudText>
            </div>
        }
        else if (!grades.Any())
        {
            <div class="text-center py-12">
                <MudText Typo="Typo.h5" Class="text-gray-600 mb-2">No Grades Found</MudText>
                <MudText Class="text-gray-500 mb-4">Start by adding your first grade to the system.</MudText>
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="Icons.Material.Filled.Add"
                          OnClick="ShowCreateForm">
                    Add First Grade
                </MudButton>
            </div>
        }
        else
        {
            <div class="d-flex gap-4 flex-wrap mb-4">
                <MudTextField @bind-Value="searchTerm" 
                             @bind-Value:event="oninput"
                             Label="Search grades..." 
                             Variant="Variant.Outlined"
                             Adornment="Adornment.Start"
                             AdornmentIcon="Icons.Material.Filled.Search"
                             Class="flex-grow-1" />
                <MudSelect T="string" @bind-Value="selectedGradeFilter" 
                          Label="Filter by Grade"
                          Variant="Variant.Outlined"
                          Class="min-width-200">
                    <MudSelectItem T="string" Value="@("")">All Grades</MudSelectItem>
                    <MudSelectItem T="string" Value="@("A")">A Grades</MudSelectItem>
                    <MudSelectItem T="string" Value="@("B")">B Grades</MudSelectItem>
                    <MudSelectItem T="string" Value="@("C")">C Grades</MudSelectItem>
                    <MudSelectItem T="string" Value="@("D")">D Grades</MudSelectItem>
                    <MudSelectItem T="string" Value="@("F")">F Grades</MudSelectItem>
                </MudSelect>
            </div>

            <!-- Desktop Table View -->
            <div class="d-none d-md-block">
                <MudTable Items="@filteredGrades" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@(grades == null)" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>Student</MudTh>
                        <MudTh>Course</MudTh>
                        <MudTh>Grade</MudTh>
                        <MudTh>Points</MudTh>
                        <MudTh>Date</MudTh>
                        <MudTh>Comments</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Student">@context.StudentName</MudTd>
                        <MudTd DataLabel="Course">@context.CourseName</MudTd>
                        <MudTd DataLabel="Grade">
                            <MudChip T="string" Color="@GetGradeColor(context.Grade)" Size="Size.Small">
                                @context.Grade
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="Points">@context.Points.ToString("F1")%</MudTd>
                        <MudTd DataLabel="Date">@context.GradedDate.ToString("yyyy-MM-dd")</MudTd>
                        <MudTd DataLabel="Comments">@(string.IsNullOrEmpty(context.Comments) ? "-" : context.Comments)</MudTd>
                        <MudTd DataLabel="Actions">
                            <MudButtonGroup Variant="Variant.Text" Size="Size.Small">
                                <MudIconButton Icon="Icons.Material.Filled.Visibility" 
                                              Color="Color.Info" 
                                              Href="@($"/grades/{context.Id}")" />
                                <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                              Color="Color.Warning" 
                                              Href="@($"/grades/edit/{context.Id}")" />
                                <MudIconButton Icon="Icons.Material.Filled.Delete" 
                                              Color="Color.Error" 
                                              OnClick="@(() => DeleteGrade(context.Id))" />
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </div>

            <!-- Mobile Card View -->
            <div class="d-block d-md-none">
                <MudGrid>
                    @foreach (var grade in filteredGrades)
                    {
                        <MudItem xs="12">
                            <MudCard Elevation="3" Class="mb-3">
                                <MudCardContent>
                                    <div class="d-flex justify-space-between align-start mb-3">
                                        <div class="flex-grow-1">
                                            <MudText Typo="Typo.h6" Class="font-weight-bold">@grade.StudentName</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">@grade.CourseName</MudText>
                                        </div>
                                        <MudChip T="string" Color="@GetGradeColor(grade.Grade)" Size="Size.Small">
                                            @grade.Grade
                                        </MudChip>
                                    </div>
                                    
                                    <MudGrid>
                                        <MudItem xs="6">
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Points</MudText>
                                            <MudText Typo="Typo.h6" Class="font-weight-bold">@grade.Points.ToString("F1")%</MudText>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Date</MudText>
                                            <MudText Typo="Typo.body2">@grade.GradedDate.ToString("yyyy-MM-dd")</MudText>
                                        </MudItem>
                                        @if (!string.IsNullOrEmpty(grade.Comments))
                                        {
                                            <MudItem xs="12">
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">Comments</MudText>
                                                <MudText Typo="Typo.body2">@grade.Comments</MudText>
                                            </MudItem>
                                        }
                                    </MudGrid>
                                </MudCardContent>
                                
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Info" 
                                              StartIcon="Icons.Material.Filled.Visibility"
                                              Href="@($"/grades/{grade.Id}")">
                                        View
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Warning" 
                                              StartIcon="Icons.Material.Filled.Edit"
                                              Href="@($"/grades/edit/{grade.Id}")">
                                        Edit
                                    </MudButton>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Error" 
                                              StartIcon="Icons.Material.Filled.Delete"
                                              OnClick="@(() => DeleteGrade(grade.Id))">
                                        Delete
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </div>

            <MudText Class="mt-4 text-sm text-gray-600">
                Showing @filteredGrades.Count() of @(grades?.Count ?? 0) grades
            </MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    private List<GradeResponse>? grades = new();
    private IEnumerable<GradeResponse> filteredGrades => grades?.Where(FilterGrades) ?? new List<GradeResponse>();
    private string searchTerm = "";
    private string selectedGradeFilter = "";
    private bool showCreateForm = false;
    private CreateGradeRequest newGrade = new();

    private List<StudentInfo> availableStudents = new();
    private List<CourseInfo> availableCourses = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await Task.Delay(500); // Simulate loading
        try
        {
            // Load students for dropdown
            availableStudents = new List<StudentInfo>
            {
                new StudentInfo { Id = Guid.NewGuid(), FirstName = "John", LastName = "Doe" },
                new StudentInfo { Id = Guid.NewGuid(), FirstName = "Jane", LastName = "Smith" },
                new StudentInfo { Id = Guid.NewGuid(), FirstName = "Mike", LastName = "Johnson" }
            };

            // Load courses for dropdown
            availableCourses = new List<CourseInfo>
            {
                new CourseInfo { Id = Guid.NewGuid(), Name = "Algebra I", Code = "MATH101" },
                new CourseInfo { Id = Guid.NewGuid(), Name = "Biology Fundamentals", Code = "BIO101" },
                new CourseInfo { Id = Guid.NewGuid(), Name = "English Literature", Code = "ENG201" }
            };

            // TODO: Replace with actual API call
            grades = new List<GradeResponse>
            {
                new GradeResponse
                {
                    Id = Guid.NewGuid(),
                    StudentName = "John Doe",
                    CourseName = "Algebra I",
                    Grade = "A",
                    Points = 92.5m,
                    Comments = "Excellent understanding of algebraic concepts",
                    GradedDate = DateTime.Now.AddDays(-5)
                },
                new GradeResponse
                {
                    Id = Guid.NewGuid(),
                    StudentName = "Jane Smith",
                    CourseName = "Biology Fundamentals",
                    Grade = "B+",
                    Points = 87.3m,
                    Comments = "Good grasp of biological principles",
                    GradedDate = DateTime.Now.AddDays(-3)
                },
                new GradeResponse
                {
                    Id = Guid.NewGuid(),
                    StudentName = "Mike Johnson",
                    CourseName = "English Literature",
                    Grade = "B",
                    Points = 84.0m,
                    Comments = "",
                    GradedDate = DateTime.Now.AddDays(-1)
                }
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private bool FilterGrades(GradeResponse grade)
    {
        var matchesSearch = string.IsNullOrWhiteSpace(searchTerm) ||
                           (grade.StudentName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                           (grade.CourseName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                           (grade.Grade?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false);

        var matchesGradeFilter = string.IsNullOrWhiteSpace(selectedGradeFilter) ||
                                (grade.Grade?.StartsWith(selectedGradeFilter, StringComparison.OrdinalIgnoreCase) ?? false);

        return matchesSearch && matchesGradeFilter;
    }

    private Color GetGradeColor(string grade)
    {
        return grade?.ToUpper() switch
        {
            "A+" or "A" or "A-" => Color.Success,
            "B+" or "B" or "B-" => Color.Primary,
            "C+" or "C" or "C-" => Color.Warning,
            "D" => Color.Default,
            "F" => Color.Error,
            _ => Color.Default
        };
    }

    private void ShowCreateForm()
    {
        newGrade = new CreateGradeRequest();
        showCreateForm = true;
    }

    private void CancelCreate()
    {
        showCreateForm = false;
        newGrade = new CreateGradeRequest();
    }

    private void SaveGrade()
    {
        if (grades != null && newGrade.StudentId.HasValue && newGrade.CourseId.HasValue && !string.IsNullOrWhiteSpace(newGrade.Grade))
        {
            var selectedStudent = availableStudents.FirstOrDefault(s => s.Id == newGrade.StudentId.Value);
            var selectedCourse = availableCourses.FirstOrDefault(c => c.Id == newGrade.CourseId.Value);

            var grade = new GradeResponse
            {
                Id = Guid.NewGuid(),
                StudentName = selectedStudent != null ? $"{selectedStudent.FirstName} {selectedStudent.LastName}" : "Unknown Student",
                CourseName = selectedCourse?.Name ?? "Unknown Course",
                Grade = newGrade.Grade,
                Points = newGrade.Points,
                Comments = newGrade.Comments,
                GradedDate = DateTime.Now
            };

            grades.Add(grade);
            CancelCreate();
            StateHasChanged();
        }
    }

    private void DeleteGrade(Guid gradeId)
    {
        if (grades != null)
        {
            grades.RemoveAll(g => g.Id == gradeId);
            StateHasChanged();
        }
    }

    // Simplified models
    public class CreateGradeRequest
    {
        public Guid? StudentId { get; set; }
        public Guid? CourseId { get; set; }
        public string Grade { get; set; } = "";
        public decimal Points { get; set; }
        public string Comments { get; set; } = "";
    }

    public class GradeResponse
    {
        public Guid Id { get; set; }
        public string StudentName { get; set; } = "";
        public string CourseName { get; set; } = "";
        public string Grade { get; set; } = "";
        public decimal Points { get; set; }
        public string Comments { get; set; } = "";
        public DateTime GradedDate { get; set; }
    }

    public class StudentInfo
    {
        public Guid Id { get; set; }
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
    }

    public class CourseInfo
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string Code { get; set; } = "";
    }
}
