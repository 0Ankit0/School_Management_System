using Microsoft.EntityFrameworkCore;
using SMS.Microservices.SchoolCore.Models;

namespace SMS.Microservices.SchoolCore.Data;

public class SchoolCoreDbContext : DbContext
{
    public SchoolCoreDbContext(DbContextOptions<SchoolCoreDbContext> options) : base(options)
    {
    }

    public DbSet<Student> Students { get; set; }
    public DbSet<Teacher> Teachers { get; set; }
    public DbSet<Course> Courses { get; set; }
    public DbSet<Enrollment> Enrollments { get; set; }
    public DbSet<ParentGuardian> ParentGuardians { get; set; }
    public DbSet<Attendance> Attendances { get; set; }
    public DbSet<Assignment> Assignments { get; set; }
    public DbSet<AssignmentSubmission> AssignmentSubmissions { get; set; }
    public DbSet<AuditLog> AuditLogs { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        // Configure ExternalId to be generated by the application code (Guid.NewGuid() in model constructors)
    }

    public override int SaveChanges()
    {
        AddTimestamps();
        return base.SaveChanges();
    }

    public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
    {
        AddTimestamps();
        return base.SaveChangesAsync(cancellationToken);
    }

    private void AddTimestamps()
    {
        var entities = ChangeTracker.Entries()
            .Where(x => x.Entity is not null && (x.State == EntityState.Added || x.State == EntityState.Modified));

        // TODO: Replace with actual user ID from authentication context
        var currentUserId = 1; 

        foreach (var entity in entities)
        {
            if (entity.State == EntityState.Added)
            {
                if (entity.Entity.GetType().GetProperty("CreatedAt") != null)
                {
                    entity.Property("CreatedAt").CurrentValue = DateTime.UtcNow;
                }
                if (entity.Entity.GetType().GetProperty("CreatedBy") != null)
                {
                    entity.Property("CreatedBy").CurrentValue = currentUserId;
                }
            }

            if (entity.Entity.GetType().GetProperty("UpdatedAt") != null)
            {
                entity.Property("UpdatedAt").CurrentValue = DateTime.UtcNow;
            }
            if (entity.Entity.GetType().GetProperty("UpdatedBy") != null)
            {
                entity.Property("UpdatedBy").CurrentValue = currentUserId;
            }
        }
    }
}
